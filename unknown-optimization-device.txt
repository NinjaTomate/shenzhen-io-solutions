# Input variables
# P_X
# P_Y

# Output variables
# P_POWER

# Interpretation of sheet:
# When P_X < 20, P_POWER = 30
# When 20 <= P_X < 40, P_POWER = 0
# When 40 <= P_X < 60
#   If 40 <= P_Y < 80, P_POWER = 50
#   ELSE, P_POWER = 0
# When 60 <= P_X < 80
#   If 40 <= P_Y < 80, P_POWER = 80
#   ELSE, P_POWER = 30
# When 80 <= P_X, P_POWER = 30

# Observation:
P_POWER = P_X_POWER + P_Y_POWER

When       P_X < 20, P_X_POWER = 30
When 20 <= P_X < 40, P_X_POWER = 0
When 40 <= P_X < 60, P_X_POWER = 0
When 60 <= P_X < 80, P_X_POWER = 30
When 80 <= P_X     , P_X_POWER = 30

When       P_Y < 40, P_Y_POWER = 0
When 40 <= P_Y < 80, P_Y_POWER = 50
When 80 <= P_Y     , P_Y_POWER = 0

Simplified:
When       P_X < 20, P_X_POWER = 30
When 20 <= P_X < 60, P_X_POWER = 0
When 60 <= P_X     , P_X_POWER = 30

When       P_Y < 40, P_Y_POWER = 0
When 40 <= P_Y < 80, P_Y_POWER = 50
When 80 <= P_Y     , P_Y_POWER = 0

# Requirements:
We need 3 different P pins so at least 2 controllers

# SIMPLE GIST
# ABANDONED TEMPORARILY
# Gist:
## Controller 1
Convert P_X and P_Y to X_X and X_Y

## Controller 2
Implement logic with X_X and X_Y

# Proof of concept
## Controller 1
# Convert P_X and P_Y to X_X and X_Y
mov P_X X_X
mov P_Y X_Y

# Controller 2
# Save X_X to ACC
mov X_X ACC

# If X_X (ACC) is under 20, then output 30
tlt X_X__ACC 20
+ mov P_POWER 30
+ jmp SLEEP
# Perform similar logic for outer edges
tlt X_X__ACC 40
+ mov 30 P_POWER
+ jmp SLEEP
tgt X_X__ACC 79 # (i.e. >= 80)
+ mov 30 P_POWER
+ jmp SLEEP

SLEEP:
slp 1

# COMPLEX GIST
# Gist:
## Controller 1
Convert P_X and P_Y to X_X_POWER and X_Y_POWER

## Controller 2
Add X_X_POWER and X_Y_POWER
Export to P_POWER

# Proof of concept
## Controller 1
# If P_X is between 20 AND 60, then output 0
# DEV: IF ordering gets confusing here so trust me...
tgt P_X 19 (i.e. >= 20)
+ tlt P_X 60 (i.e. < 60)
+ mov 0 X_X_POWER
# Otherwise, output 30
- mov 30 X_X_POWER

# If P_Y is between 40 AND 80, then output 50
tgt P_Y 39 (i.e. >= 40)
+ tlt P_Y 80 (i.e. < 80)
+ mov 50 X_Y_POWER
# Otherwise, output 50
- mov 0 X_Y_POWER

# Controller 2
# Overwrite ACC with X_X_POWER
# Add X_Y_POWER to ACC
# Export total as P_POWER
