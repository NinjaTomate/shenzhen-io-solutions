# Input variables
# P_X
# P_Y

# Output variables
# P_POWER

# Interpretation of sheet:
# When P_X < 20, P_POWER = 30
# When 20 <= P_X < 40, P_POWER = 0
# When 40 <= P_X < 60
#   If 40 <= P_Y < 80, P_POWER = 50
#   ELSE, P_POWER = 0
# When 60 <= P_X < 80
#   If 40 <= P_Y < 80, P_POWER = 80
#   ELSE, P_POWER = 30
# When 80 <= P_X, P_POWER = 30

# Observation:
When 40 <= X < 100, POWER = X_POWER + Y_POWER
  i.e. 40 <= X < 60, X_POWER = 0
       60 <= X     , X_POWER = 30
             Y < 40, Y_POWER = 0
       40 <= Y < 80, Y_POWER = 50
       80 <= Y     , Y_POWER = 0

# Requirements:
We need 3 different P pins so at least 2 controllers

# Gist:
## Controller 1
Convert P_X and P_Y to X_X and X_Y

## Controller 2
Implement logic with X_X and X_Y

# Proof of concept
## Controller 1
# Convert P_X and P_Y to X_X and X_Y
mov P_X X_X
mov P_Y X_Y

# Controller 2
# Save X_X to DAT
mov X_X DAT

# If X_X (DAT) is < 20, then output 30
tlt X_X__DAT 20
+ mov acc 30
+ jmp OUTPUT

# If X_X (DAT) is < 40, then output 0
tlt X_X__DAT 20
+ mov acc 0
+ jmp OUTPUT

# If X_X (DAT) is >= 80, then output 30
tgt X_X__DAT 79
+ mov acc 30
+ jmp OUTPUT

# If X_X (DAT) is <= 60, set `acc` to 0 (X_POWER)
# DEV: Now that non-summation case is done, we use summation logic
tlt X_X__DAT 61
+ mov 0 acc
# Otherwise, set `acc` to 30 (X_POWER)
- mov 30 acc

# Save X_Y to DAT
mov X_Y DAT

# If X_Y (DAT) is <= 40 AND < 80, add 50 to total (ACC)
tgt X_Y__DAT 39
+ tlt X_Y__DAT 80
  + add 50

OUTPUT:
# Output total (ACC) as power (P_POWER)
mov ACC P_POWER
slp 1

# Reframed into 2 controllers due to too much logic in C2
# Controller 1: Convert P to X and calculate Y power
# Controller 2: Calculate and add X power

## Controller 1 (MC6000)
# Convert P_X and P_Y to X_X and X_Y
mov P_X X_X
mov P_Y X_Y

# If between P_X is <= 40 AND < 80
#   AND P_Y is <= 40 and < 80, output X_Y_POWER = 30
tgt P_X 39
+ tlt P_X 80
+ tgt P_Y 39
+ tlt P_Y 80
  + mov X_Y_POWER 30
# Otherwise, output X_Y_POWER = 0
# DEV: We must write to this pin as it's digital
mov X_Y_POWER 0

# Controller 2 (MC4000)
# Save X_X to DAT
mov X_X DAT

# DEV: We are moving X_X_POWER onto acc and adding X_Y_POWER to it
# If X_X (DAT) is <= 20 AND < 60, then set X_X_POWER to 0
tlt X_X__DAT 60
+ tgt X_X__DAT 19 # (i.e. 20)
+ mov acc 0
- mov acc 30

# Add X_Y_POWER to X_X_POWER
add X_Y_POWER
mov acc P_POWER
slp 1

# TODO: We can downgrade to MC4000 as we don't need X_Y anymore
