# Input variables
# P_EMERGENCY
# X_PHASE_0
# X_PHASE_1
# X_PHASE_2

# Output variables
# P_LIGHT_0
# P_LIGHT_1
# P_LIGHT_2

# Overview
Show light 1
Show light 2
Show light 3

If emergency is enabled, cancel all others

# First iteration
## Gist
Turn on P_LIGHT_0
Sleep X_PHASE_0
Turn on P_LIGHT_1
Sleep X_PHASE_1
Turn on P_LIGHT_2
Sleep X_PHASE_2

AND each of P_LIGHT_* with ! P_EMERGENCY

TODO: How to solve extra pin X and P pin...

Elegant solution

Microcontroller to write out phases to RAM

Then READ from RAM and loop

Still no simple solution for 3rd P pin

Oh, right DX300

## Code
- 1 MC4000X
- 1 inverter
- 1 DX300
- 3 AND gates

```
# Turn on LIGHT_0
mov 100 x3
# Sleep for PHASE_0
slp x0
# Turn on LIGHT_1
mov 010 x3
# Sleep for PHASE_1
slp x1
# Turn on LIGHT_2
mov 001 x3
# Sleep for PHASE_2
slp x2
```

Unfortunately it doesn't work due to sequence restarting =(

# Second iteration

Phase change observer
Phase change lighter

Observer:

If emergency
  Reset counter to phase 0
  Send -1 to lighter (or use AND gates to neutralize)
  TODO: Add 1 for later decrement? or use jump SLEEP
# DEV: This will run in emergency
If looping over last phase
  Decrement
  Jump SLEEP

... How do I know which phase comes next =_=

```
teq p0 100
+ mov x0 acc
+ mov 0 dat
+ jmp SLEEP
tgt acc 0
+ sub 1
+ jmp SLEEP
mov dat acc
add 1
mov acc dat
SLEEP: slp 1
```

# Third iteration

Write values to RAM on start
Cycle those as phase

It works \o/

Items:

- RAM backfiller (MC4000X)
- RAM
- RAM looper (MC6000)
- DX300

Code:

RAM backfiller

```
# Backfill phase values and values to use in DX300
# This is PHASE_0 length
mov x0 x3
# This is DX300 for PHASE_0
mov 100 x3
# This is PHASE_1 length
mov x1 x3
# This is DX300 for PHASE_1
mov 010 x3
# etc
mov x2 x3
mov 001 x3
# Sleep forever
# DEV: We technically should loop here but this is a toy env
slp 999
```

RAM looper

```
# If we are in emergency
teq p0 100
  # Reset counter so it loops on end
+ mov 0 acc
  # Turn off all lights
+ mov 000 x0
  # Move to end of RAM memory
+ mov 6 x3
  # Don't go through loop logic
+ jmp SLEEP

# Decrement our count
sub 1

# If we haven't hit zero, loop again
tgt acc 0
+ jmp SLEEP

# If we are at the end of memory, jump to the start
teq x3 6
+ mov 0 x3

# Read in phase length
mov x2 acc

# Output new light settings
mov x2 x0

# Sleep
SLEEP: slp 1
```
