# Input variables
# X_RADIO_RX = [DESTINATION_STATION, TOOL_CLEAN_TIME, TOOL_FEED_TIME]

# Output variables
# P_MOTOR
# P_TOOL_CLEAN
# P_TOOL_FEED

# Gist
# Read in latest packet
Save RX to ACC
# If we have new instructions
IF ACC !== -999
  Save data as digits in acc
  Send off to motor for moving
  Wait for motor finish
  Restore and send digits in acc to pins

# Code
## MC6000
# If we have new instruction
mov x0 dat
teq dat -999
  # Send new position to motor controller
- mov dat x3
- dst x0 0
- dst x0 1
  # Wait for motor controller to tell us it's done
- slx x3
  # Noop to drain read
- mov x3 null
  # Backup ACC to DAT as we will lose it with `dgt`
  # Restore digits from original input and send to tools
- mov acc dat
- dgt 1
- gen p1 acc 0
- mov dat acc
- dgt 0
- gen p0 acc 0
slp 1

# TODO: Use tcp for less lines?

# If we are under position, move forward
tlt _CURRENT_POSITION /* < */ _TARGET_POSITION
+ gen P_MOTOR 1 0
+ add 1
# If we are over position, move back
tgt _TARGET_POSITION /* > */ _CURRENT_POSITION
+ gen P_MOTOR 0 1
+ sub 1

# Reset motor and sleep
mov 50 P_MOTOR
slp 1
```

@mov 50 p1
slx x0
mov x0 dat
LOOP:
mov 50 p1
tcp dat acc
+ gen p1 1 0
+ add 1
+ jmp LOOP
- gen p1 0 1
- sub 1
- jmp LOOP
mov 100 x0
