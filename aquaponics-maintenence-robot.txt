# Input variables
# X_RADIO_RX = [DESTINATION_STATION, TOOL_CLEAN_TIME, TOOL_FEED_TIME]

# Output variables
# P_MOTOR
# P_TOOL_CLEAN
# P_TOOL_FEED

# Gist
# Read in latest packet
Save RX to ACC
# If we have new instructions
IF ACC !== -999
  Save data as digits in acc
  Send off to motor for moving
  Wait for motor finish
  Restore and send digits in acc to pins

# Code
## MC6000
# If we have new instruction
mov x0 dat
teq dat -999
  # Send new position to motor controller
- mov dat x3
- dst x0 0
- dst x0 1
  # Wait for motor controller to tell us it's done
- slx x3
  # Noop to drain read
- mov x3 null
  # Backup ACC to DAT as we will lose it with `dgt`
  # Restore digits from original input and send to tools
- mov acc dat
- dgt 1
- gen p1 acc 0
- mov dat acc
- dgt 0
- gen p0 acc 0
slp 1
```

## MC6000
```
# Wait for signal
slx x0

# Overwrite new position
mov x0 dat

# While we are off position
LOOP:
tcp dat acc
# If we are under, send a signal to move forward
+ mov 1 x3
+ slp 2
+ add 1
+ jmp LOOP
# If we are over, send a signal to backward forward
- mov -1 x3
- slp 2
- sub 1
- jmp LOOP

# Notify parent we are done
mov 100 x0
```

## MC6000
```
# Reset motor
mov 50 p1

# Wait for signal
slx x0

# Determine which direction to move
tcp x0 acc
  # If we are moving forward, pulse forward for 1 second
+ gen p1 1 0
  # Otherwise, pulse backward for 1 second
- gen p1 0 1

# DEV: Motor will be reset by `mov 50 p1`
```
