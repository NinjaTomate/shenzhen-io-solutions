# Input variables
X_ERROR
P_POWER
P_TEMP
P_CONTROL

# Output variables
X_DISPLAY

# Gist
Turn on parts of a display via number (e.g. 1 for compressor)
Turn off parts of a display via negative of number (e.g. -1 for compressor)
Turn off all parts via -999
If there's an error, pass unchanged number directly to display (these will be +n and -n when appropriate)

This seems really straight forward, I guess we'll get to coding and see what changes
  (e.g. if control rods need magic control logic)
    but they seem like range conversions...

Yep, error is a straight up proxy

For the power/temp should have their own converter where we +10 for temperature

That is 2 controllers:

- 1 to read temp/power and pass them along to converter then add X (if anything) and pass to display
  I guess we'll need something to reset 1X markers every step

# First iteration
We are mostly missing control rods not being properly offset (we should drop -33 and -34 too, only 32 is constant)

Error handler (MC4000X):

```
# Set up constant cells to on
@mov 10 x3
@mov 20 x3
@mov 32 x3
@mov 33 x3
@mov 34 x3

# Wait for error handler to give us info
slx x0

# Forward error info
mov x0 x3
```

Power top half:

```
# Unset top 2 power cells
mov -13 x1
mov -14 x1

# If they should be filled in, fill them in
tgt p0 59
+ mov 13 x1
tgt p0 79
+ mov 14 x1

# Sleep
slp: slp 1
```

Power bottom half:

Similar logic as top half

```
mov -11 x1
mov -12 x1
tgt p0 19
+ mov 11 x1
tgt p0 39
+ mov 12 x1
slp: slp 1
```

Temperature:

Similar logic as top/bottom power controllers:

```
mov -21 x3
mov -22 x3
mov -23 x3
mov -24 x3
tgt p0 19
+ mov 21 x3
tgt p0 39
+ mov 22 x3
tgt p0 59
+ mov 23 x3
tgt p0 79
+ mov 24 x3
slp: slp 1
```

Control rods:

Flawed setup but similar logic to top/bottom power controllers:

```
mov -31 x1
mov -30 x1
tgt p0 0
+ mov 31 x1
tgt p0 50
+ mov 30 x1
slp: slp 1
```

# Solution
Well that was easy o_o
Except for control rod logic, that kind of sucked...

- 1 MC4000X, error controller
- 1 MC6000, power controller
- 1 MC6000, temperature controller
- 1 MC6000, control rod controller

Control rod controller:

```
# Enable always on blocks
@mov 10 x3
@mov 20 x3
@mov 32 x3

# Wait for error message
slx x0

# Pass along error message to display
mov x0 x3
```

Power controller:

```
# Reset all output blocks
# TODO: Can we optimize these by moving them into `tgt` statements?
mov -11 x3
mov -12 x3
mov -13 x3
mov -14 x3

# If we should show the block, then show it
tgt p0 19
+ mov 11 x3
tgt p0 39
+ mov 12 x3
tgt p0 59
+ mov 13 x3
tgt p0 79
+ mov 14 x3

# Sleep
slp: slp 1
```

Temperature controller:

Same logic as power controller:

```
mov -21 x3
mov -22 x3
mov -23 x3
mov -24 x3
tgt p0 19
+ mov 21 x3
tgt p0 39
+ mov 22 x3
tgt p0 59
+ mov 23 x3
tgt p0 79
+ mov 24 x3
slp: slp 1
```

Control rod controller:

```
# Reset output blocks
mov -30 x2
mov -31 x2
mov -33 x2
mov -34 x2

# Compare against 50
tcp p0 50
  # If we are 0, then enable rightmost block
- mov 34 x2
  # If we are 100, then enable leftmost block
+ mov 30 x2

# If we are over 49 (i.e. 50 or 100), enable 2nd leftmost block
tgt p0 49
+ mov 31 x2

# If we are under 51 (i.e. 0 or 5), enable 2nd rightmost block
tlt p0 51
+ mov 33 x2
slp: slp 1
```
