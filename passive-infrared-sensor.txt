# Input variables
# rtc, 0 to 100
# sensor, 0 to 100
# on time, -999 to 999
# off time, -999 to 999

# Output variables
# alarm, 0 to 100

# Gist:
# Controller 1:
#   Normalize SENSOR into _ALARM (i.e. 0-100 -> 0/100)
# Controller 2:
#   When _ALARM, after ON_TIME, and before OFF_TIME, send ALARM
# DEV: This won't work elegantly due to too many inputs on C2

# Gist:
# Controller 1:
#   Normalize RTC (P), ON_TIME (D), OFF_TIME (D) into ENABLE (P)
# Controller 2:
#   Sleep until ENABLE (D), normalize SENSOR into ALARM (i.e. 0-100 -> 0/100)

# Controller 1
# DEV: By default, we assume rtc === 69 as per simulation
# If we are before off time (e.g. rtc=10, off_time=28)
tlt RTC OFF_TIME
  # Enable alarm
+ mov 100 ENABLE
# Otherwise (after off time)
- tgt RTC ON_TIME
  # Enable alarm
  + mov 100 ENABLE
  # Otherwise, disable alarm
  - mov 0 ENABLE

# Controller 1
# Check if we are enabled
teq ENABLE 100
# If not, disable alarm
# DEV: We use `not` early to prevent `teq` nesting
- mov 0 ALARM
# Otherwise if sensor is at least 20
+ tgt SENSOR 20
      # Enable alarm
    + mov 100 ALARM
      # Otherwise, disable alarm
    - mov 0 ALARM
