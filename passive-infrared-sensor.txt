# Input variables
# rtc, 0 to 100
# sensor, 0 to 100
# on time, -999 to 999
# off time, -999 to 999

# Output variables
# alarm, 0 to 100

# Gist:
# Controller 1:
#   Normalize SENSOR into _ALARM (i.e. 0-100 -> 0/100)
# Controller 2:
#   When _ALARM, after ON_TIME, and before OFF_TIME, send ALARM
# DEV: This won't work elegantly due to too many inputs on C2

# Gist:
# Controller 1:
#   Normalize RTC (P), ON_TIME (D), OFF_TIME (D) into ENABLE (P)
# Controller 2:
#   Sleep until ENABLE (D), normalize SENSOR into ALARM (i.e. 0-100 -> 0/100)

# TODO: We could prob improve efficiency by only using `X_ENABLE` on change
# TODO: We could prob improve efficiency via `slx` for `X_ENABLE`

# Controller 1
# DEV: By default, we assume rtc === 69 as per simulation
# If we are before off time (e.g. rtc=10, off_time=28)
tlt P_RTC X_OFF_TIME
  # Enable alarm
+ jmp ENABLE

# If we are after on time (e.g. rtc=80, on_time=88)
tlt P_RTC X_ON_TIME
  # Enable alarm
+ mov 100 X_ENABLE
# Otherwise, disable alarm
+ mov 0 X_ENABLE
jmp END

ENABLE:
mov 100 X_ENABLE

END:
slp 1

# Controller 2
# If we are enabled
teq X_ENABLE 100
# If not: Disable alarm
- mov 0 ALARM
# If so: If sensor is at least 20 (i.e. > 19)
+ tgt SENSOR 19
  # Enable alarm
  + mov 100 ALARM
  # Otherwise, disable alarm
  - mov 0 ALARM
slp 1
