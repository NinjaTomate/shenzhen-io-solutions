# Input variables
# X_METER_IN
# X_LOWER_IN
# X_HIGHER_IN

# Output variables
# X_METER_OUT
# X_LOWER_OUT
# X_HIGHER_OUT

# Gist
Packet = [ID, length, ...]

# DEV: Coming from higher ID so only send to meter or lower
On signal from HIGHER_IN
  If ID == METER_ID
    # While length--
    ACC = LENGTH
    LOOP1:
      # Proxy data to meter
      MOV HIGHER_IN METER_OUT
      ACC -= 1
      JMP LOOP1
  ELSE (ID != METER_ID, I.E. ID < METER_ID)
    # While length--
    # TODO: Any way to join loops?
    ACC = LENGTH
    LOOP2:
      # Proxy data to meter
      MOV HIGHER_IN LOWER_OUT
      ACC -= 1
      JMP LOOP2

TODO: METER_IN has 3 cases =/

After doing some exploration and logic
  We would need a 5X board to handle METER_IN on its own
  So instead of that, send data as to HIGHER_IN and LOWER_IN controllers

More realizations
  We can send METER_IN to both HIGHER_IN and LOWER_IN
  If id is higher in HIGHER_IN, do nothing
  If id is lower in LOWER_IN, do nothing
  If id is same in HIGHER_IN, send to METER_OUT
  If id is same in LOWER_IN, do nothing (prevent double sends)
  If id is lower in HIGHER_IN, send to LOWER_OUT
  If id is higher in LOWER_IN, send to HIGHER_OUT

Ran into issues
  - Cannot share inputs across METER_IN as it spreads from LOWER_IN to HIGHER_IN
  - Too much logic for proxying

  ```
  HEAD:
  slx x0
  mov x0 dat
  tgt dat x1
  + jmp HEAD
  # TODO: Set track
  # teq dat x1
  # + mov 0 dat
  # - mov 1 dat
  mov x0 acc
  LOOP:
  teq dat 0
  + mov x0 x2
  - mov x0 x3
  teq acc 0
  - sub 1
  - jmp LOOP
  ```

Explore:
  1 controller per output and cascading ownership
  Nope, still too bulky

1 controller to write to RAM
Then 3 smaller controllers to read?

  Smallest loop for proxying data:

  ```
  slx x0
  mov x0 x2
  mov x0 acc
  mov acc x2
  LOOP:
  mov x0 x2
  teq acc 0
  - sub 1
  - jmp LOOP
  ```

  For RAM, we add `mov 0 x3`

Using RAM as auto incrementer will work great

# Wait for signal
slx x1

# Save ID
mov x1 dat

# Default to address 2
mov 2 p1

# Compare to expected address
tcp dat x0
# If we are going up, then use address 1
+ mov 1 p1
# Otherwise, use address 3
- mov 3 p1

# Write ID to RAM + auto-incr
mov dat x3

# Save message length
mov x1 acc

# Write message length to RAM + auto-incr
mov acc x3

# For remaining data, write to RAM + auto-incr
LOOP:
mov x1 x3
teq acc 1
- sub 1
- jmp LOOP

# TODO: Need to set p1 to 0 at end
# Hey, I think this is like heartbleed =P

Oh hey, same logic works without RAM

Here's our METER_OUT controller

# Wait for data
slx x0
LOOP:
# If we are being written to
teq p0 2
  # Proxy data and check again
+ mov x0 x1
+ jmp LOOP

We are getting shafted by 1 line to reset `p1`

Going to try multiple controllers:
- 1 for setting channel
- 1 for proxying data

We actually don't need proxy data either...
  We can directly wire in to *_IN

Ahhh... can't do it because we flush all data items from *_IN

slx x0
mov x0 acc
mov 2 p0
tcp acc x3
+ mov 1 p0
- mov 3 p0
mov x0 acc
LOOP:
teq acc 0
- mov x0 null
- sub 1
- jmp LOOP

TODO: Back to original COPY COPY COPY and try writing ID + COMPARISON to STREAM

```
# Wait for data
slx x1

# Save ID
mov x1 dat

# Enable listeners
mov 1 p0

# Send input ID
mov dat x3
# Send METER ID
mov x0 x3

# Save message length
mov x1 acc

# Send message length
mov acc x3
LOOP:

# If we are done sending packet
teq acc 0
  # Reset listeners
+ mov 0 p0
  # Otherwise, send packet
- mov x1 x3
- sub 1
- jmp LOOP
```

```
# Wait for signal
slx x0
# Compare id to meter id
# DEV: In this case, look for an exact match to enable ourselves
#   This is the meter out controller
mov x0 acc
teq x0 acc
+ mov 1 acc

# Until we are told to shut off
LOOP:
# If we are a match and data is coming
# DEV: Ordering of `teq` is super important
#   We need to make sure we check `p0` after its completed
teq acc 1
+ teq p0 1
# Output our data
+ mov x0 x1
+ jmp LOOP
```

Nooope, not done yet

We are draining x3 due to new id checks... fuuuuuck...

Subtraction kind of works but we are on same channel for `+50` and `+100`
  so any constant will be identified as our NULL at some point

```
mov 100 p0
slx x1
mov x1 acc
sub x0
mov acc p0
add x0
mov acc x3
mov x1 acc
mov acc x3
LOOP:
teq acc 0
- mov x1 x3
- sub 1
- jmp LOOP
```

```
slx x0
LOOP:
teq p0 0
# tgt p0 0
# tlt p0 0
+ mov x0 x1
+ jmp LOOP
```


Had an idea where we store ACC runner in second controller

Not working as planned though since not all controllers have access to length...

Next shot

1 controller which determines P setting
3 controllers which count down, proxy, and reset P
  Pretty sure this is too bulky but whatevs

Ugh, sleep doesn't work as expected...

Thankfully that's not what we wants to do already... o_o

Heh, nope -- too much space for small outer proxies


```
# Get signal
slx x0
mov x0 acc

# Determine controller
mov 2 p1
tcp acc x3
+ mov 1 p1
- mov 3 p1

# Resent next 2 packets
mov acc x0
mov x0 dat
mov dat x0

# Sleep for LENGTH
slp dat
```

```
# Get signal
slx x0
# If we are on
teq p0 2
# Send ID
+ mov x0 x1
# Save length
+ mov x0 acc
# TODO: Resend
LOOP:
teq p0 2
# TODO: Decrement
+ mov x0 x1
+ jmp LOOP
```

-----------

Attempt again but now we tried to duplicate LENGTH at head of message

```
slx x0
mov x0 acc
mov x0 dat
mov dat x0
mov 2 p1
tcp acc x3
+ mov 1 p1
- mov 3 p1

# mov dat x0
# mov dat x0
mov acc x0
mov dat x0
slp 1
```

```
slx x0
slx x0
mov x0 acc
LOOP:
teq p0 2
+ tgt acc 0
+ mov x0 x1
+ sub 1
+ jmp LOOP
```

Some weird half awake thought:

- Could reuse decrement loop
- Tell it to wait for 2 items
- It proxies ID and length
- Tell it to wait for LENGTH items
- It proxies remainder

----------

Back with some things to try:

- Another controller to compute `p0` value
- Consolidate outer proxies, convert `p` value to ENABLE/DISABLE only (prob going to get bulky with jumps)

# Gist
It works!

- 1 controller to toggle routing P pin (e.g. on/off and which)
- 1 controller to calculate routing number
- 3 outer controllers to proxy data only if enabled/selected

Enabler/Router controller (MC6000)

```
# Wait for signal
slx x1

# Save ID for resending
mov x1 dat

# Write/read ID to see which routing PIN to use (routing controller)
mov dat x2
mov x2 p0

# Resend ID
mov dat x3

# Save message length to ACC
mov x1 acc

# Resent message length
mov acc x3

LOOP:
# For all remaining bytes, proxy them
teq acc 0
  # When we are done with all bytes, disable routing
+ mov 0 p0
  # Otherwise, proxy + loop
- mov x1 x3
- sub 1
- jmp LOOP
```

Routing controller (MC4000)

```
# Wait for signal
HEAD:
slx x3

# Compare signal and send matching routing path value
# TODO: We can prob cut out label + `jmp`s via `teq`?
tcp x3 x2
+ mov 1 x3
+ jmp HEAD
- mov 3 x3
- jmp HEAD
mov 2 x3
```

Outer proxies

```
# Wait for signal
slx x0
LOOP:
# If we are enabled
teq p0 2
  # Pull down data
+ mov x0 x1
  # Wait for any `p0` disabling
  # TODO: Can prob use `slx x0`?
+ nop
+ nop
  # Loop again
+ jmp LOOP
```
