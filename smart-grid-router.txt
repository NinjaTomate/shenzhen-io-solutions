# Input variables
# X_METER_IN
# X_LOWER_IN
# X_HIGHER_IN

# Output variables
# X_METER_OUT
# X_LOWER_OUT
# X_HIGHER_OUT

# Gist
Packet = [ID, length, ...]

# DEV: Coming from higher ID so only send to meter or lower
On signal from HIGHER_IN
  If ID == METER_ID
    # While length--
    ACC = LENGTH
    LOOP1:
      # Proxy data to meter
      MOV HIGHER_IN METER_OUT
      ACC -= 1
      JMP LOOP1
  ELSE (ID != METER_ID, I.E. ID < METER_ID)
    # While length--
    # TODO: Any way to join loops?
    ACC = LENGTH
    LOOP2:
      # Proxy data to meter
      MOV HIGHER_IN LOWER_OUT
      ACC -= 1
      JMP LOOP2

TODO: METER_IN has 3 cases =/

After doing some exploration and logic
  We would need a 5X board to handle METER_IN on its own
  So instead of that, send data as to HIGHER_IN and LOWER_IN controllers

More realizations
  We can send METER_IN to both HIGHER_IN and LOWER_IN
  If id is higher in HIGHER_IN, do nothing
  If id is lower in LOWER_IN, do nothing
  If id is same in HIGHER_IN, send to METER_OUT
  If id is same in LOWER_IN, do nothing (prevent double sends)
  If id is lower in HIGHER_IN, send to LOWER_OUT
  If id is higher in LOWER_IN, send to HIGHER_OUT

Ran into issues
  - Cannot share inputs across METER_IN as it spreads from LOWER_IN to HIGHER_IN
  - Too much logic for proxying

  ```
  HEAD:
  slx x0
  mov x0 dat
  tgt dat x1
  + jmp HEAD
  # TODO: Set track
  # teq dat x1
  # + mov 0 dat
  # - mov 1 dat
  mov x0 acc
  LOOP:
  teq dat 0
  + mov x0 x2
  - mov x0 x3
  teq acc 0
  - sub 1
  - jmp LOOP
  ```

Explore:
  1 controller per output and cascading ownership
  Nope, still too bulky

1 controller to write to RAM
Then 3 smaller controllers to read?

  Smallest loop for proxying data:

  ```
  slx x0
  mov x0 x2
  mov x0 acc
  mov acc x2
  LOOP:
  mov x0 x2
  teq acc 0
  - sub 1
  - jmp LOOP
  ```

  For RAM, we add `mov 0 x3`

Using RAM as auto incrementer will work great

# Wait for signal
slx x1

# Save ID
mov x1 dat

# Default to address 2
mov 2 p1

# Compare to expected address
tcp dat x0
# If we are going up, then use address 1
+ mov 1 p1
# Otherwise, use address 3
- mov 3 p1

# Write ID to RAM + auto-incr
mov dat x3

# Save message length
mov x1 acc

# Write message length to RAM + auto-incr
mov acc x3

# For remaining data, write to RAM + auto-incr
LOOP:
mov x1 x3
teq acc 1
- sub 1
- jmp LOOP

# TODO: Need to set p1 to 0 at end
# Hey, I think this is like heartbleed =P

Oh hey, same logic works without RAM

Here's our METER_OUT controller

# Wait for data
slx x0
LOOP:
# If we are being written to
teq p0 2
  # Proxy data and check again
+ mov x0 x1
+ jmp LOOP

We are getting shafted by 1 line to reset `p1`

Going to try multiple controllers:
- 1 for setting channel
- 1 for proxying data

We actually don't need proxy data either...
  We can directly wire in to *_IN

Ahhh... can't do it because we flush all data items from *_IN

slx x0
mov x0 acc
mov 2 p0
tcp acc x3
+ mov 1 p0
- mov 3 p0
mov x0 acc
LOOP:
teq acc 0
- mov x0 null
- sub 1
- jmp LOOP

