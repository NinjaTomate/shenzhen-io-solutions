# Input variables
P_START_STOP
P_RESET_OFF

# Output variables
X_DISPLAY

# Gist
- Initially device is off
- Turn on by pressing start/stop once
- Once device is on, press start/stop to start counter
- Counter is +1 for every 2 time units on
- On P_RESET_OFF press:
    - If not running and > 0, reset to 0
    - If not running and = 0, turn off
    - If running, ignored

TODO: If we need to save input PINs we can use a DX300

Various thoughts:

- Could have an always running counter with a reset signal (due to 2 time units being weird)
- Will likely need to maintain running state in 1 controller
    - It should read current count from another controller via `P_` flag if possible

First proof of concept:

- Get on/off working

```
# Compare start/stop button via DX300
tcp x1 010
# If no buttons, then sleep
- jmp slp
# If P_RESET_OFF, then turn off display
+ mov -999 x3
+ jmp slp

# Otherwise (P_START_STOP was pressed), turn on display
mov 0 x3

# Sleep
slp: slp 1
```

Was attempting state exploration controller but had another idea

- 1 controller to determine manage state
- 1 controller to increment (pinged by state)
- 1 controller to manage display (pinged by incrementer)

Without pinging each other via X pins, we will have timing issues with P pins

Incomplete logic, need to handle stop case -- need to figure out how to get `if` branching right

```
# If start/stop is pressed
teq x0 010
  # and state is "on but stopped"
+ teq acc 2
  # Change state to "on and started"
+ mov 1 acc

# If start/stop is pressed
teq x0 010
  # and state is "off"
+ teq acc 0
  # Change state to "on but stopped"
+ mov 2 acc

# If reset/off is pressed
teq x0 100
  # and state is "on but stopped"
+ teq acc 2
  # and count is 0
  # TODO: Need to handle counter reset
+ teq p0 0
  # Change state to "off"
+ mov 0 acc

# Tell incrementer of current state
mov acc x1

# Sleep
slp: slp 1
```

```
# Wait for signal
slp: slx x1

# If state is NOT "on and started", then output current count
# TODO: Do we need to output current count
teq x1 1
- jmp ret

# Increment our counter (modular counting via `dat`)
teq dat 0
+ mov 1 dat
- add 1
- mov 0 dat

# Output our current count
ret: mov acc p0
```

Logic to sort out:

if start/stop
  if off
    on
  else (on)
    if counting
      not counting
    else
      counting

This means `counting/not counting` must be `acc` (and on/off is `dat`) so we can use `not` and we can analyse `else` first as it doesn't affect `dat`


```
# If start/stop pressed and we are enabled, toggle counting/not counting state
teq x0 010
teq dat 100
+ not
# If start/stop pressed and we are disabled, enable us
# TODO: Do we need to reset `acc` for safe measures? (i.e. make sure not counting) -- prob not since we can only turn off when not counting
teq x0 010
teq dat 0
+ mov 100 dat
```

Start/stop logic looking good:

```
# If start/stop pressed and we are on, toggle counting/not counting state
teq x0 010
+ teq dat 100
+ not

# If start/stop pressed and we are off, turn us on
teq x0 010
+ teq dat 0
+ mov 100 dat

# If reset/off pressed and we are not counting and count is 0, turn us off
# TODO: Need to handle reset of count...
teq x0 100
+ teq acc 0
+ teq p0 0
+ mov 0 dat

# Output counting/not counting state to incrementer
mov acc x1

# Sleep
slp: slp 1
```

Counter reset logic complete too but can't figure out how to hook in display on/off logic...

Prob need to use X pin from state controller or reduce lines or something...

```
# If start/stop pressed and we are on, toggle counting/not counting state
teq x0 010
+ teq dat 100
+ not

# If start/stop pressed and we are off, turn us on
teq x0 010
+ teq dat 0
+ mov 100 dat

# Output counting/not counting state to incrementer
# DEV: Incrementer will look at reset/off and determine wheter to turn on/off itself due to us passing counting/not counting state
mov acc x1

# If reset/off pressed and we are not counting and count is 0, turn us off
teq x0 100
+ teq acc 0
+ teq p0 0
+ mov 0 dat

# Sleep
slp: slp 1
```

```
# Wait for signal
slp: slx x0

# If we are counting, jump to increment logic
#   This lines up with ignoring reset/off switch
# TODO: Can we clean up these jumps at all? I don't think so due to nested if's otherwise
teq x0 100
+ jmp incr

# If reset/off pressed, reset counter
teq x1 100
+ mov 0 acc

# Jump over increment logic
jmp ret

# Perform incrementing...
incr: teq dat 0
+ mov 1 dat
- add 1
- mov 0 dat

# Output new count
ret: mov acc p0
```

TODO: Pass through on/off state from state to incrementer to display controller

Almost solved but counting too early...

```
teq x0 010
+ teq dat 100
+ not
teq x0 010
+ teq dat 0
+ mov 100 dat
mov acc x1
teq x0 100
+ teq acc 0
+ teq p0 0
+ mov 0 dat
mov dat x1
slp: slp 1
```

```
slp: slx x0
teq x0 100
+ jmp incr
teq x1 100
+ mov 0 acc
jmp ret
incr: teq dat 0
+ mov 1 dat
- add 1
- mov 0 dat
ret: mov acc p0
mov x0 x3
mov acc x3
```

```
slp: slx x1
teq x1 0
+ mov -999 x3
+ mov x1 acc
- mov x1 x3
```
