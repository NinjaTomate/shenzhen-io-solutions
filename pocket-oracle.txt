# Input variables
# P_BUTTON
# P_ORACLE

# Output variables
# P_DISPLAY_0
# P_DISPLAY_1
# P_DISPLAY_2
# P_DISPLAY_3
# P_DISPLAY_4
# P_DISPLAY_5

# Thoughts
- Need to save oracle data in memory somehow
    - Maybe directly to pins via DX300?

# Gist - Too bulky
3 controllers

Controller 1:

When button is pressed
  Send X signal to child #1
  Sleep 3
  Send X signal to child #2

Child 1:

When X signal
  Reset acc
  3 times
    DST set to ACC from oracle
    Sleep
  Sleep 3
  Flush to DX300

Child 2:

When X signal
  Reset acc
  3 times
    DST set to ACC from oracle
    Sleep
  No sleep (this is second half)
  Flush to DX300

# Gist - Too long for 1 controller
1 controller

If button is pressed
  Reset acc
  3 times
    DST set to ACC from oracle
    Sleep
  Flush to DX300 (already bad)
  Reset acc
  3 times
    DST set to ACC from oracle
    Sleep
  Flush to DX300 (already bad)
Sleep

teq p1 100
+ dst 0 p0
+ slp 1
+ dst 1 p0
+ slp 1
+ dst 2 p0
+ slp 1
+ mov acc dat
+ mov 000 acc
+ dst 0 p0
+ slp 1
+ dst 1 p0
+ slp 1
+ dst 2 p0

# Gist
2 controllers

Controller 1

If button is pressed
  Reset acc
  DST set to ACC from oracle
  Sleep
  DST set to ACC from oracle
  Sleep
  DST set to ACC from oracle
  Trigger Controller 2? (maybe it detects itself?)
  Sleep 3
  Flush to DX300 (already bad)
Sleep

teq p1 100
- jmp SLEEP
mov 000 acc
teq p0 100
+ dst 0 1
slp 1
teq p0 100
+ dst 1 1
slp 1

+ slp 3
+ mov acc x3
SLEEP:
slp 1

Not enough lines again...

# Try it with RAM...

Haha, nope -- not enough space

# Gist
2 controllers
First 3 digits in 1 controller

Then next 3 digits in second

teq p1 100
- jmp SLEEP
teq p0 100
+ dst 0 1
slp 1
teq p0 100
+ dst 1 1
slp 1
teq p0 100
+ dst 2 1
slp 3
mov acc x2
SLEEP:
slp 1

teq p1 100
+ slp 3
- jmp SLEEP
teq p0 100
+ dst 0 1
slp 1
teq p0 100
+ dst 1 1
slp 1
teq p0 100
+ dst 2 1
mov acc x2
SLEEP:
slp 1

TODO: Evens and odds?
TODO: Move first digit overwrite to HEAD label and jump there always? (saves us a sleep)
  Nope, doesn't work due to sleeping too early

Using addition instead of DST
  Didn't work, same lines

teq p1 100
- jmp SLEEP
mov 0 acc
add p0
sub 99
slp 1
add p0
sub 90
slp 1
add p0
slp 3
mov acc x2
SLEEP:
slp 1

TODO: Output lag in 3rd controller?
- Still can't get placement working...

TODO: Maybe replace DX300 with controllers somehow?
- Noooope

TODO: Maybe 1 controller that sends data packets
  and another to accumulate then send data

Also, instead of DST. Maybe multiply + add
  It's ignorant of digits :+1:

This is going to be madenning... maybe...

Controller 1

```
# If the button wasn't pushed, jump to SLEEP
teq p1 100
- jmp SLEEP

# Reset our counter
mov 0 acc
LOOP:
# Tell controller 2 which value and digit
mov p0 x2
mov acc x2
mov acc x2

# Increment our digit counter
add 1

# If we don't have 6 digits, loop again
teq acc 6
- slp 1
- jmp LOOP

# Sleep
SLEEP:
slp 1
```

Controller 2

```
# When we get a new digit
slx x1

# Move past 2 digits 1 left (bitshift)
mul 10

# If we have a 100, insert to our 0
teq x1 100
+ add 1

# If we are on the 3rd digit, flush acc to dat and reset
teq x1 2
+ mov acc dat
+ mov 0 acc

# If we are on the 6th digit, flush it all and reset
teq x1 5
+ mov acc x3
+ mov dat x2
+ mov 0 acc
+ mov 0 dat
```

This gets close but numbers are flipped

Going to try again with `dst` variant

  Unable to reset digits for DST due to no register

Going to try multiply with DAT storage
  Nah too bulky

What about passing modular counter for DST?
Maybe we can do something with ACC and DAT in original...

We moved digit access to Controller 2 directly


Maybe use DX300 as external memory

Using DX300 to conver 100 to 1, neat
