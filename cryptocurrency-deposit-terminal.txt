# Input variables
# X_CARD_READER (non-blocking, i.e. -999)
# P_CASH_20
# P_CASH_50
# P_CASH_100

# Output variables
# X_NETWORK

# Overview
Buffer card to RAM
Total cash in ACC
On `-1` from card reader
  Flush card from RAM to X_NETWORK
  Flush cash (ACC) to X_NETWORK

# First iteration
## Gist
2 controllers

Cash counter
If signal === -999
JMP SLEEP

If signal === -1
MOV ACC 8
JMP OUTPUT_LOOP

Else
MOV ACC 7
JMP INPUT_LOOP

TODO: Need to see if we have enough lines for these 2 loops (prob not)
  If not, 3 controllers:
  - 1 to write card id to RAM + send -1 to next controller
  - 1 to read from RAM and flush cash via X pin
  - And cash reader

Read cash in via DX300
DEV: We can't use X pin due to reading value every second
If P SIGNAL is 1
- Write ACC to P
- Write 0 to ACC

## Code
Completed count and dump which is 2 controllers to count and dump...

```
# Save incoming packet
mov x0 dat

# If packet is to flush
# DEV: We run this first to make sure we beat add instructions
teq dat -1
  # Turn on flag for accumulator to dump
  # DEV: We can use `gen p0 0 0` but need really good timing
+ mov 100 p0
  # Collect from accumulator (blocks us until it's written)
  # DEV: We can also use good timing here too
  # TODO: This should write to RAM for simpler final flush
+ mov x2 dat
  # Reset flag to avoid halts
+ mov 0 p0
+ jmp SLEEP

# If packet is useless, continue
teq dat -999
+ jmp SLEEP
SLEEP: slp 1
```

TODO: We should be able to avoid SLEEP jmps via `tgt -1`

```
# Convert/add cash 20 and 50
teq x0 010
+ add 20
teq x0 100
+ add 50
# Add cash 100 directly (saves 1 line \o/)
add p0

# If we are supposed to dump, then dump and reset
teq p1 100
+ mov acc x1
+ mov 0 acc
slp 1
```

LOOP: mov x0 x3
tgt acc 0
+ sub 1
+ jmp LOOP

----

Trying alternative where we use RAM index as counter

card reader to RAM dump:

```
# Save our value
mov x1 dat

# If it's a useless packet, skip it
# TODO: We could use LOOP for `jmp` too but this is more clear
teq dat -999
+ jmp SLEEP

# Save our stored value
mov dat x2

# If this is our card number, proxy 7 more times
tgt dat -1
+ mov 7 acc
LOOP:

# If we have values to proxy
tgt acc 0
  # Proxy value
+ mov x1 x2
  # Loop it
+ sub 1
+ jmp LOOP

# Sleep
SLEEP: slp 1
```

Usage outside of this:

Inspect `a0` until we hit 9th index (i.e. `-1`)
Then flush card info from RAM
Then flush cash info from second controller

-------

Now with proxying from RAM \o/

```
# Save our value
mov x1 dat

# If it's a useless packet, skip it
# TODO: We could use LOOP for `jmp` too but this is more clear
teq dat -999
+ jmp SLEEP

# Save our stored value
mov dat x2

# If this is our card number, proxy 7 more times
tgt dat -1
+ mov 7 acc
# Otherwise, tell dumper to start dump
- mov 0 x3
LOOP:

# If we have values to proxy
tgt acc 0
  # Proxy value
+ mov x1 x2
  # Loop it
+ sub 1
+ jmp LOOP

# Sleep
SLEEP: slp 1
```

Dumper

```
# When we get signal to read from RAM
slx x2

# Reset RAM
# DEV: This also flushes x2 which is :+1:
mov x2 x0

# Flush 8 card digits
mov 8 acc
LOOP:
tgt acc 0
+ mov x1 x3
+ sub 1
+ jmp LOOP

# TODO: Dump money
# TODO: Use pulsing to indicate reset on cash
```
