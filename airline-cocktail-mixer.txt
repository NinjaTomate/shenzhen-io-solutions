# Input variables
# X_KEYPAD

# Output variables
# P_VODKA
# P_GIN
# P_LEMON
# P_LIME
# P_CRANBERRY
# P_VERMOUTH

# First thoughts
Seems like meat printer v2

Considering if we can only write to vodka and gin mutually exclusively

Prob going to need DX300 and some clever RAM storage

Maybe duplexer for keypad info to 2 controller
  1 for top 3 items
  1 for bottom 3 items

Maybe something like

311 to indicate 3 units vodka, 1 unit gin, 1 unit lemon (0.5oz = unit)
  (although vodka + gin are mutually exclusive, we have scenario in bottom 3)

For 3 top, we can prob do
  If 311 over 100, then 200 (i.e. -111)
  What's DST of negative values again? It wraps...

Simplest form is:

Load data into `dat`
Calculate 1's for DX300
  Load data into `acc`
  Retrieve 1's place
  If over 0
    Load data into `acc`
    Decrement by 1 (would need to figure out how to get 10)
      Maybe another controller...
    Save `acc` to data
    Set 1's place to 1 somehow for DX300
  Else:
    Set 0's place to 1 somehow for DX300
Loop for 10's and 100's place
If data > 0, sleep + loop

Okay, let's do that again -- this time where we know there's a second controller which track DX300 value

First controller:

Load data into `dat`
(acc = 0 by default, maybe need to reset)
LOOP:
  Load data into `acc`
  Send position to NEXT CONTROLLER
  Retrieve 1's place (acc)
  Send 1's place to NEXT CONTROLLER
  Load data into `acc`
  Subtract amount specified by NEXT CONTROLLER
    This will be index * 1/0
      How will NEXT CONTROLLER calculate this without losing their `acc`
      Maybe they need a `dat` value (MC6000)

How the hell do we loop this if we are using `acc`?

Enough thought... let's try this...

Maybe duplexer takes care of values to load from memory

## Numbers

| # |      Name     |         Whole oz        |         Half oz         | Computer values |
|   |               |                         |                         |                 |
|---|---------------|-------------------------|-------------------------|-----------------|
| 1 | Vodka shot    | 1.5 vodka               | 3 vodka                 | 300 000         |
| 2 | Lemon drop    | 3 vodka, 1 lemon        | 6 vodka, 2 lemon        | 602 000         |
| 3 | Cosmo         | 2 vodka, 1 lime, 1 cran | 4 vodka, 2 lime, 2 cran | 400 220         |
| 4 | Cape Cod      | 2 vodka, 2 cran         | 4 vodka, 4 cran         | 400 040         |
| 5 | Vodka martini | 3 vodka, 1 verm         | 6 vodka, 2 verm         | 600 002         |
| 6 | Gimlet        | 3 gin, 1 lime           | 6 gin, 2 lime           | 060 200         |
| 7 | Gin martini   | 3 gin, 1 verm           | 6 gin, 2 verm           | 060 002         |

## Back to code

TODO: Might need to flip memory order depending on which value is read first

Made some progress but not much

TODO: Maybe we can do `-111` trick?

Duplexer:

Read from keypad
Look at corresponding TOP + BOTTOM durations in read only memory (ROM - head desk)
  Stored as 600 for 6 x 0.5oz, 0 x 0.5oz, 0 x 0.5oz
Send both signals to TOP + BOTTOM chains

```
# Wait for signal
slx x1

# Read in keypad offset
mov x1 acc

# Correct 1-7 range to 0-6 index
sub 1

# Expand offset to include both values (not only 1)
mul 2

# Jump to offset in ROM
mov acc x2

# Output TOP and BOTTOM values to TOP and BOTTOM controllers
mov x3 x0
mov x3 x0
```

Countdown on 100's place

```
# Wait for signal
slx x0

# Read in durations
mov x0 dat

LOOP:
# Load remaining durations
mov dat acc

# Load 100's place
# TODO: Need to make this dynamic, maybe via DX300 setter
dgt 2

# If we have at least 1 set in 100's place
tgt acc 0
  # Notify DX300 setter about 1 in 100's place
  # TODO: How does DX300 setter know this is 100's place?
      Maybe DX300 setter should have modular counter?
+ mov 1 x3
  # Decrement 100's place in stored memory
  # TODO: Need to make this dynamic, maybe via DX300 setter
+ mov dat acc
+ sub 100
+ mov acc dat
  # Notify DX300 setter about 0 in 100's place
- mov 0 x3

# If we still have remaining durations, wait for time and LOOP
tgt dat 0
+ slp 1
+ jmp LOOP
```

TODO: Maybe we can ditch `jmp` and `label` by moving around `tgt dat` to `slx`?
  Yep, looks like we could

A whole other strategy: Use RAM and reset RAM after `000` or before looking at it

We have a chicken/egg problem for `dgt x3` vs telling `x3` to wake up due to knowing new offset

Ooooh, we could use P pin from DX300 setter but how can it read it?

----

Explore super dumb ideas like hardcoded non-RAM encoded values

like, can we set and sleep for some of these things?

Sooo adjacent tracks are mutually exclusive, we could abuse that with 3 DX300 + sleep

|  #  | VODKA GIN | LEMON LIME | CRAN VERM |
|-----|-----------|------------|-----------|
| 001 | 3     0   | 0     0    | 0    0    |
| 002 | 6     0   | 2     0    | 0    0    |
| 003 | 4     0   | 0     2    | 2    0    |
| 004 | 4     0   | 0     0    | 4    0    |
| 005 | 6     0   | 0     0    | 0    2    |
| 006 | 0     6   | 0     2    | 0    0    |
| 007 | 0     6   | 0     0    | 0    2    |

Let's explore it

omfg, it works... waaaat =D

Okay, code:

- 1 keypad duplicator (MC4000X)
- 3 on/off controllers (MC6000, need for 2 registes and lines of code)
- 3 DX300 (1 for vodka/gin, 1 for lemon/lime, 1 for cran/verm)

Duplicator:

Take 1 keypad signal, resend it 3 times

```
# Wait for keypad signal
slx x0

# Store it
mov x0 acc

# Resend it 3 times
# DEV: We could use different pins but it's same info
mov acc x3
mov acc x3
mov acc x3
```

Vodka/gin controller:

Determine DX300 settings and sleep duration via hardcoded data
  Then sleep and reset DX300

```
# Wait for signal
slx x0

# Save signal for later
mov x0 dat

# By default, sleep for 6 seconds (most common, makes less logic later)
mov 6 acc

# Turn on vodka/gin pins
tlt dat 6
+ mov 100 x3
- mov 010 x3

# If we are pouring vodka shot, only pour for 3 seconds (okay "time units")
teq dat 1
+ mov 3 acc

# If we are handling type 3 and 4, then restrict to 4 seconds
tgt dat 2
+ tlt dat 5
+ mov 4 acc

# Sleep for duration
slp acc

# Reset switch
mov 000 x3
```

Lemon/lime controller:

```
# Wait for signal and save data
slx x1
mov x1 dat

# By default, sleep for 0 seconds before reset
mov 0 acc

# Handle one-off cases directly
teq dat 2
+ mov 2 acc
+ mov 100 x3
teq dat 3
+ mov 2 acc
+ mov 001 x3
teq dat 6
+ mov 2 acc
+ mov 001 x3

# Sleep for duration and reset pins
slp acc
mov 000 x3
```

Cranberry/vermouth controller:

```
# Wait for signal and save data
slx x0
mov x0 dat

# By default, sleep for 2 seconds before reset
mov 2 acc

# Toggle between cranberry and vermouth pins
# DEV: In "0" duration case, we sleep for 0 seconds so it's reset immediately
tlt dat 5
+ mov 010 x3
- mov 001 x3

# Handle one-off durations
tlt dat 3
+ mov 0 acc
teq dat 4
+ mov 4 acc
teq dat 6
+ mov 0 acc

# Sleep for duration and reset pins
slp acc
mov 000 x3
```
