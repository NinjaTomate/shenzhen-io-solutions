# Input variables
# X_RADIO_RX = [R_INTENSITY, G_INTENSITY, B_INTENSITY, DURATION]
# We will use R_INT, G_INT, B_INT for short

# Output variables
# P_LED_R
# P_LED_G
# P_LED_B

# Gist
# On acc, count down for pulse duration
# Somehow persist X values to P
# When acc hits zero, flush P values

# Explore
# Write digital input to DX300
# Sleep for a while

# Nope, no intensity preserved
# but maybe we can use p1 on microcontrollers

# Can we read different numbers from rx on 2 mc?
# We can but that'll be confusing

# Worst case: MC4000X to break up values?
# Or maybe 2 MC4000 which dump P0 (R_INT), P1 (G_INT)
#   then [B_INT, DUR]

# Let's do that last one...

# Gist
## Controller 1 (MC4000)
Read RX[R_INT] to P_LED_R
Read RX[G_INT] to P_LED_G
Write RX[B_INT] to X_C2
Save RX[DUR] to ACC_1
Write DUR__ACC_1 to X_C2

Countdown ACC_1
Flush P_LED_R
Flush P_LED_G

## Controller 2
Read X_C2[B_INT] to P_LED_B
Read X_C2[DUR] to ACC_2
Countdown ACC_2
Flush P_LED_B

# Code
## Controller 1 (MC6000 as we need data)
# Check for new data (e.g. R_INT)
mov RX DAT

# If we have new data
# DEV: We use negation to save a JMP
teq DAT -999
# Restore data as R_INT
- mov DAT R_INT
# Read RX[G_INT] to P_LED_G
- mov RX G_INT
# Write RX[B_INT] to X_C2
- mov RX X_C2
# Save RX[DUR] to ACC_1
- mov RX ACC
# Write DUR__ACC_1 to X_C2
- mov ACC X_C2

# Countdown
sub 1
teq acc 0
+ mov 0 P_LED_R
+ mov 0 P_LED_G
