# Input variables
X_RADIO_RX

# Output variables
P_MOTOR_X
P_MOTOR_Y
P_HARVEST

# Overview
Harvester location = `0, 0`
On radio signal
  Queue up new position `x, y` (from signal)

When queue isn't empty
  Move to next position in queue and harvest

Diagonal moves should be made when possible

Helper: Will never get packet for `0, 0`
Helper: Will never have more than 6 pending locations

# Gist
1 controller to read signals into RAM (queue, address 1)
1 controller to read from RAM (queue, address 2)
  Sends signals to X movement, Y movement, and handle harvest personally
1 controller for X movement (X pin -> on + sleep for `n`)
1 controller for Y movement (X pin -> on + sleep for `n`)

We thought about having signals queue back/forth with reader but we will likely miss out on `slx` signals due to sleeps or something

TODO: Probably going to run into trouble with keeping track of position but let's see how this goes...
TODO: Will probably hit queue flush states so need to reset to `0, 0` at some point or skip over `13 + 14` in RAM

First attempt (only signal to RAM and read from RAM):

```
# Save incoming signal
mov x0 acc

# If the signal isn't -999
teq acc -999
  # Save it to RAM (autoincrements)
- mov acc x2
- mov x0 x2

# Sleep
slp: slp 1
```

TODO: Improve this by writing directly to memory and using `tlt 1` instead of `teq 0`

```
# Save current position (originally use a `sub 2` variant but this is easier)
mov x1 acc

# If the next 2 positions are 0, 0, then reset position and sleep
teq x0 0
+ teq x0 0
+ mov acc x1
+ jmp slp

# Otherwise, reset index and "output" the 2 positions
mov acc x1
mov x0 dat
mov x0 dat

# Erase output positions to prevent looping
mov acc x1
mov 0 x0
mov 0 x0

# Sleep
slp: slp 1
```

Tried out `-999` but it feels like we're pushing the buck. Going to use `nop` to fix the solution with less cost

```
mov x0 x2
mov x0 x2
slp: slp 1
```

```
mov x1 acc
tcp x0 0
- jmp slp
+ mov acc x1
+ mov x0 dat
+ mov x0 dat
+ mov acc x1
+ mov 0 x0
+ mov 0 x0
mov acc x1
slp: slp 1
```

Never mind, we get 2 nops at most but run out of time =(

Tried out this logic but it fails due to (1) not being fast enough and (2) not handling [x, 0]

```
mov x1 acc
teq x0 -999
+ mov x0 null
+ jmp slp
teq x0 0
+ mov acc x1
+ jmp slp
mov acc x1
mov x0 dat
mov x0 dat
mov acc x1
mov 0 x0
mov 0 x0
slp: slp 1
```

TODO: What if we handle resetting values via writer so we can free up space for `nop`
