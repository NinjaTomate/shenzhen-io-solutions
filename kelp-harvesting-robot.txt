# Input variables
X_RADIO_RX

# Output variables
P_MOTOR_X
P_MOTOR_Y
P_HARVEST

# Overview
Harvester location = `0, 0`
On radio signal
  Queue up new position `x, y` (from signal)

When queue isn't empty
  Move to next position in queue and harvest

Diagonal moves should be made when possible

Helper: Will never get packet for `0, 0`
Helper: Will never have more than 6 pending locations

# Gist
1 controller to read signals into RAM (queue, address 1)
1 controller to read from RAM (queue, address 2)
  Sends signals to X movement, Y movement, and handle harvest personally
1 controller for X movement (X pin -> on + sleep for `n`)
1 controller for Y movement (X pin -> on + sleep for `n`)

We thought about having signals queue back/forth with reader but we will likely miss out on `slx` signals due to sleeps or something

TODO: Probably going to run into trouble with keeping track of position but let's see how this goes...
TODO: Will probably hit queue flush states so need to reset to `0, 0` at some point or skip over `13 + 14` in RAM

First attempt (only signal to RAM and read from RAM):

```
# Save incoming signal
mov x0 acc

# If the signal isn't -999
teq acc -999
  # Save it to RAM (autoincrements)
- mov acc x2
- mov x0 x2

# Sleep
slp: slp 1
```

TODO: Improve this by writing directly to memory and using `tlt 1` instead of `teq 0`

```
# Save current position (originally use a `sub 2` variant but this is easier)
mov x1 acc

# If the next 2 positions are 0, 0, then reset position and sleep
teq x0 0
+ teq x0 0
+ mov acc x1
+ jmp slp

# Otherwise, reset index and "output" the 2 positions
mov acc x1
mov x0 dat
mov x0 dat

# Erase output positions to prevent looping
mov acc x1
mov 0 x0
mov 0 x0

# Sleep
slp: slp 1
```

Tried out `-999` but it feels like we're pushing the buck. Going to use `nop` to fix the solution with less cost

```
mov x0 x2
mov x0 x2
slp: slp 1
```

```
mov x1 acc
tcp x0 0
- jmp slp
+ mov acc x1
+ mov x0 dat
+ mov x0 dat
+ mov acc x1
+ mov 0 x0
+ mov 0 x0
mov acc x1
slp: slp 1
```

Never mind, we get 2 nops at most but run out of time =(

Tried out this logic but it fails due to (1) not being fast enough and (2) not handling [x, 0]

```
mov x1 acc
teq x0 -999
+ mov x0 null
+ jmp slp
teq x0 0
+ mov acc x1
+ jmp slp
mov acc x1
mov x0 dat
mov x0 dat
mov acc x1
mov 0 x0
mov 0 x0
slp: slp 1
```

TODO: What if we handle resetting values via writer so we can free up space for `nop`

Alright, this works. Yey.

We will need to write/read `-999` to/from RAM due to speed issues

```
# Save incoming signals to RAM (autoincrements)
mov x0 x2
mov x0 x2

# Save current position
mov x3 acc

# Erase next 2 slots (should be cleared as it's the 7th pending location)
mov 0 x2
mov 0 x2

# Reset to "current position"
mov acc x3

# Sleep
slp: slp 1
```

```
# Back up current position to `acc`
# DEV: This also delays us so incoming signal can be written to RAM
mov x1 acc

# If next location is `-999`, then ignore following `-999` and sleep
# DEV: We could have an implementation which resets `-999` to `0` but this is less code
teq x0 -999
+ mov x0 null
+ jmp slp

# Reset our position
mov acc x1

# If the next values are 0, 0 (i.e. no new values in queue), then reset our position and sleep
teq x0 0
+ teq x0 0
+ mov acc x1
+ jmp slp

# Reset our position and output x, y coordinates
mov acc x1
mov x0 dat
mov x0 dat

# Sleep
slp: slp 1
```

TODO: Explore a `tcp` branch with `-999`, `0`, and non-zeroes
  I think negatives with double ifs are broken though...

TODO: I wonder if we'll overwrite valid data with `-999` at some point...
   If we do run into it, the `mov x0 null` will become `mov acc x1` (position reset)
   and we'll need to update writer to detect/wipe `-999`

Motor positions need to tell harvest when they're done

So they should use 1 X pin to tell a harvestor controller via `slx`

Then harvester tells RAM reader to resume queue via `slx` itself too

Should prob explore that `tcp` branch so maybe we can remove need for harvester standalone...

So... `tcp` won't work but dual `tlt 1` will =D

Here's a revamp with support for no `-999` persisted in RAM

```
# Output incoming signals to RAM
mov x0 x2
mov x0 x2

# Move to freshly written position
# DEV: We use `mov + sub` instead of `sub` at head get data ready for reader ASAP
mov x3 acc
sub 2
mov acc x3

# If didn't write -999, then prepare to erase upcoming memory
teq x2 -999
- add 2

# Move to position (fresh position for -999, upcoming position for non -999)
mov acc x3

# Erase memory
mov 0 x2
mov 0 x2

# Reset position for new data
mov acc x3

# Wait
slp: slp 1
```

# TODO: We can probably skip overwriting `-999` with 0's and overwrite it on next iteration...

```
# Save current position in memory
mov x1 acc

# If we have 0, 0 or -999, -999, then reset position and wait for new data
tlt x0 1
+ tlt x0 1
+ mov acc x1
+ jmp slp

# Otherwise, reset position and output data
mov acc x1
mov x0 dat
mov x0 dat

# Sleep
slp: slp 1
```

And here's the reuse of `-999`:

```
# Output incoming signals to RAM
mov x0 x2
mov x0 x2

# Move to freshly written position
# DEV: We use `mov + sub` instead of `sub` at head get data ready for reader ASAP
mov x3 acc
sub 2
mov acc x3

# If we received -999, reset our position immediately
teq x2 -999
+ jmp reset

# Otherwise, ignore next value (other non -999)
mov x2 null

# Save our new position to reset to
mov x3 acc

# Erase upcoming data's position
mov 0 x2
mov 0 x2

# Reset position to allow write into "upcoming data" slots
reset: mov acc x3

# Sleep
slp 1
```

"No -999" has 1 less line of code but I think "-999 reuse" saves power due to `jmp` instead of writing 0's

TODO: Instead of decreasing and keeping track via loop
  Do a `slp` instead...

Initially did poor sleep logic via `add/sub` + `slp 1`

```
# Reset motor position
mov 50 p1

# Wait for signal
slx x1

# Save incoming target position
mov x1 dat

# If we are at target position, jump to done
loop: teq acc dat
+ jmp done

# Move motor in desired direction
tcp dat acc
- sub 1
- mov 0 p1
+ add 1
+ mov 100 p1

# Sleep for value
slp 1

# Continue looping
jmp loop

# Notify harvester of completion
done: mov 100 x2
```

Other one is similar...

```
# Wait for response from x and y motor controllers and flush their signals
slx x0
mov x0 null
slx x0
mov x0 null

# Perform harvest
gen p1 1 0
```

Soo things that are wrong:

- Should improve sleep logic by using `mul -1` instead of looping
- Queue shouldn't consume next slots until harvest is done so it should either own harvest logic or get signal from harvester
    - Based on our slots and layout, we can prob only have it be the harvester

We are honing in on solution

Latest iteration has harvest logic in RAM reader BUT it does `slx` which leads to 1 controller finishing before other one

We need to use something like P pin watcher to prevent this
  i.e. wait for motors to reset to 50, then harvest

Then resume queue (either via `slx` or logic in controller)

```
# Save current position in memory
mov x1 acc

# If we have 0, 0 or -999, -999, then reset position and wait for new data
tlt x0 1
+ tlt x0 1
+ mov acc x1
+ jmp slp

# Otherwise, reset position and output data
mov acc x1
mov x0 x3
mov x0 x2

# Wait for X motor to finish
slx x3
mov x3 null

# Wait for Y motor to finish
# DEV: We reuse its data for setting harvester to on so we can reuse `slp`
slx x2
mov x2 p0

# Let harvester run and reset it
slp: slp 1
mov 0 p0
```

```
# Reset motor position
mov 50 p1

# Wait for new position
slx x0

# Perform (target position - current position)
#   i.e. current position -> -1 * current positon -> -1 * current position + target position)
mul -1
add x0

# Update our motor position and sleep until it's done
tcp acc 0
- mov 0 p1
+ mov 100 p1
slp acc

# Notify harvester of completion
mov 100 x0
```

We tried a P watcher setup, it's close but we run out of lines to loop and no space for more controllers

We moved to using 1 X pin for both X/Y motors. Maybe we can do same for response but on a different pin to avoid waking other controller

```
mov x1 acc
tlt x0 1
+ tlt x0 1
+ mov acc x1
+ jmp slp
mov acc x1
mov x0 x3
mov x0 x3
loop: teq p0 50
+ teq p0 50
+ mov 100 x2
+ slp 1
+ mov 0 x2
slp: slp 1
```

So we have something that works but it doesn't align with expectations

The expectations want an eager/running motor/harvest
  so we keep on moving and harvest as we sweep by

Ours stops and harvests then goes

The logic is oddly the same as dual `slx` on harvester except now they `slx` on the same pin and the motors share another pin (using Y as top motor and X as bottom since we have no space for distance extending)

Thinking about how to transfer next queued location to motors...

So motors don't keep running, they both need to hit location
  We mostly need to transmit before saying "harvest" and sleeping

I was thinking about sleeping the reader for the greater of the 2 "sleep" values

We are actually really close:

- We need to re-evaluate queue on both motor finish
- We also need to kick off harvest action for 1s

Due to lines of code, I think it should be a separate controller for harvester

We are out of pins though on RAM reader due to inconsistent timings for motor getting values in what order

So we need to use P pins or figure out backchannels

Maybe don't wait for `slx` at all and do that greatest value thing?

- Calculate sleep time on controllers
- Send back
- Find greater 1 of 2
- Sleep for that long
- Go to next

Need to trigger harvester still... but let's cross that bridge later

Can't do calculation in reader (too many lines of code)

```
next: mov x1 acc
tlt x0 1
+ tlt x0 1
+ mov acc x1
+ jmp slp
mov acc x1
mov x0 x3
mov x0 x2
mov x3 acc
mov x2 dat
tcp dat acc
+ slp dat
jmp next
slp: slp 1
```

But can do it in harvester and tell controller value via P

Closing in now, we have an off by one timing in second test suite

Probably due to a `slp 1` due to P annoyances =/
  Might be able to solve it by reusing `x2` with a preceding `999` packet or something

Reader:

```
# Same output logic as before
next: mov x1 acc
tlt x0 1
+ tlt x0 1
+ mov acc x1
+ jmp slp
mov acc x1
mov x0 x3
mov x0 x2

# After outputting signals, wait for P pin to be filled
slp 1

# Sleep for allotted time until next harvest
slp p0

# Look at queue again
jmp next

Sleep
slp: slp 1
```

Motor logic. Fixed up from before :+1:

```
# Reset motor position
mov 50 p1

# Wait for signal from reader
slx x0

# Load current position into acc as (-1 * position)
mov dat acc
mul -1

# Save target position to dat
mov x0 dat

# Calculate distance to position (target - current)
add dat

# Compare against distance
#   If 0, don't touch motor (although not needed)
tcp acc 0
  # If < 0, move motor in reverse and adjust acc to be absolute value
- mov 0 p1
- mul -1
  # If > 0, move motor in forward
+ mov 100 p1

# Output sleep duration (absolute value of distance)
mov acc x3

# Sleep for duration
slp acc
```

Harvester:

```
# Wait for signal
slx x0

# Save the 2 values
mov x0 acc
mov x0 dat

# Determine which value is greater and store it in `acc`
#   i.e. we want to sleep for longest period
tgt dat acc
+ mov dat acc

# Subtract 1 for off-by-one errors
# TODO: We thought this would be for `slp 1` on reader but no idea why for our own sleep
#   Maybe that's the off by one and we need an `add 1`
sub 1

# Output next harvest time to P
mov acc p0

# Sleep until next harvest time
slp acc

# Perform harvest
gen p1 1 0
```

Look at "Almost done, off by one"

What if we loop until P !=0 for pin sniffer?
  Is that even the problem?

Nope, that didn't solve it

```
next: mov x1 acc
tlt x0 1
+ tlt x0 1
+ mov acc x1
+ jmp slp
mov acc x1
mov x0 x3
mov x0 x2

# New code, wait for 100 to be unset
loop: teq p0 100
+ jmp loop
slp p0

# Sleep for 1 anyway due to waiting for harvest completion o_O
slp 1
jmp next
slp: slp 1
```

```
# New code, set 100 as flag
mov 100 p0

slx x0
mov x0 acc
mov x0 dat
tgt dat acc
+ mov dat acc
sub 1
mov acc p0
slp acc
gen p1 1 0
```

Oh fuck... we missed a case...

The off by one is going to a kelp location but passing over a square further down the queue

We need to restructure the code to support that

Probably have the motors request target location from reader or something

And have harvest controller constantly ask queue if we are over any squares
  Maybe expose current position via P on motors

Last touch "Almost done, while true"

Notes from this morning:

- Writer probably can't access P due to distance
- Update reader to loop full cycles and compare values (P from motors? or maybe they always output X), notify harvester on match, and tell notors to move to X, Y every 1 second (only moves by 1 closer to that unit to always get fresh location)

P output from motor feels promising

Although, we really could use X for return always...
  and always output on 1 s but would need to handle -999 in motors

Getting a late start reading though. Somehow it's getting -999 early while writer should be 1 OP ahead

Okay, we have progress but are missing a few things:

- Not unsetting completed entries (this means one we complete in transit or on arrival)
  - Should be reset to `-999` for sane skipping
  - But that doesn't really work with current code...
  - Needs more thought...
- Harvester isn't wired up, need to explore reusing an X pin me thinks
  But then we don't want to steal the motor's signal
  It feels like we need yet another controller...
  and somehow a third set of pins for RAM

Maybe we can offload harvest checking
  Like loop over RAM, ask harvester if it's a match, and then it replies with 0 or 1
    But we still have pin issue amirite?

Okay, code docs first...

Writer:

```
# Output data first
mov x2 x0
mov x2 x0

# Look at freshly written data
mov x1 acc
sub 2
mov acc x1

# If it was -999, move back to position so we overwrite it on next read
teq x0 -999
+ jmp reset

# Continue to next position
mov x0 null

# Store new position to move back to for next writes
mov x1 acc

# Clear out old data with `-999` to prevent accidental reads
mov -999 x0
mov -999 x0

# Move to new position for next writes
reset: mov acc x1

# Sleep
slp 1
```

Reader:

```
# Store original position read from
mov x1 acc

# If the data we are reading is -999, ignore it
teq x0 -999
+ jmp pre

# Otherwise, go back to original position
mov acc x1

# Tell motors where to move to
mov x0 x3
mov x0 x2

# Go back to original position
# DEV: This is to handle reading only 1 slot for -999
#   We would be fine with the 2 slots ahead for `mov`
pre: mov acc x1

# If our X coordinate matches motor coordinates,
#   Set up half of boolean for harvester
# TODO: `mov 100 dat` is never reset
loop: teq x0 p1
+ mov 100 dat

# If our Y coordinate matches, then tell harvester about our matching X coordinate (signal itself tells them Y matched)
teq x0 p0
+ mov dat null

# If we aren't at our original position, keep looping
teq x1 acc
- jmp loop

# Sleep
slp: slp 1
```

Motor:

```
# Reset motor position
mov 50 p1

# Wait for location to move to
slx x0

# Comapre current location to target location
#   Adjust current location and motor accordingly
tcp acc x0
- add 1
- mov 100 p1
+ sub 1
+ mov 0 p1

# Expose new location via P
mov acc p0

# Sleep
slp 1
```

So maybe we always read out non -999 values to controller
  and that replies with with 0 or 1 to erase it/not

The controller then forwards first X/Y to motors
  Respond with X/Y saying that match
    On match in eraser, notify harvester?
    We can't do it in here as we have to accept incoming signals
      whereas harvester can reset RAM position and emit
Then it compares remaining ones to current X/Y position
  Reponse with X/Y match/not

This should solve pin problem, unsure we have layout for it though...

Need to handle -999 skipping in current RAM reader
  Need to somehow signal end of loop?

Code is looking good but we have no way of distinguishing target location from comparison locations
  So maybe 2 controllers?

  1 to update motors
  1 to check harvest OK

I feel like outputting that to controllers won't save us much
  We wanted to do special signals but we have no space for unsetting matched locations

Current loop logic:

```
# Save original position
mov x1 acc

# If we are reading a -999, -999 or 0, 0 pair
#  then jump to original position check
loop: tlt x0 1
+ tlt x0 1
+ jmp check

# Otherwise, move back to original position
#   and output data
mov acc x1
mov x0 x3
mov x0 x3

# If we are done walking over the entirety of the RAM, go to sleep
# TODO: We can combine those jumps into a `- jmp loop`
check: teq x1 acc
+ jmp slp

# Otherwise, loop
jmp loop

# Sleep
slp: slp 1
```

Tried out sending position to motor parser but it's so much code:

```
mov x1 dat
mov 0 acc
loop: tlt x0 1
+ tlt x0 1
+ jmp check
mov acc x1
mov acc x3
mov dat x3
mov x0 x3
mov x0 x3
check: teq x1 dat
- add 2
- jmp loop
slp: slp 1
```

Maybe we let parser read from pin directly and give it a special signal to tell it to read from the signal?

Went forward with address tracking but realizing it's quite silly

We should always send `-999` and `0` so we don't have silly back tracking logic and send a `-1` flag at the start of the request

Then the parser can see the `-1` and act accordingly

`-1` will require too many lines of code...
  If we go to more controllers, we get bad layout

Maybe 1 controller to update motors and another to check motor positions?

Code updates for `-1`

```
mov x1 dat
mov -1 x3
loop: mov x0 x3
mov x0 x3
check: teq x1 dat
- jmp loop
slp: slp 1
```

```
slp: slx x1
mov x1 dat
teq dat -1
+ mov dat acc
+ jmp slp
teq acc -1
+ mov dat x3
+ mov x3 acc
+ mov x1 x2
+ mov x2 dat
- mov dat null
- mov x1 null
```

Okay, solution is looking better. We somehow squeezed a lot of controllers in. Main thing missing is unsetting harvested entries and updating position 0

But the harvesting as we move should work:

- 1 writer (not going to copy/paste)
- 1 reader
- 1 motor parser
- 2 motor controllers
- 1 harvest detector
- 1 harvester
    - At the moment, this (1) converts an X pin to a P pin and (2) allows a sleep while the harvest detector continues comparisons (even though we could exit early)

```
# Save current position
mov x1 dat

# Output target positions to motor parser
mov x0 x3
mov x0 x3

# Reset to current position for looping to prevent them being unused
mov dat x1

# Output pair to harvest controller
loop: mov x0 x2
mov x0 x2

# If the harvest controller found a match
teq x2 1
  # Hackishly replace first pair (doesn't work well)
+ mov dat x1
+ mov 0 x0
+ mov 0 x0

# If we aren't back at the original position, continue looping
check: teq x1 dat
- jmp loop

# Sleep
slp: slp 1
```

Motor parser:

```
# Wait for signal
slp: slx x0

# Save x, y pair
mov x0 acc
mov x0 dat

# If they are -999, -999 or 0, 0, then ignore it
tlt acc 1
+ tlt dat 1
+ jmp slp

# Otherwise, pass along info to motors
mov acc x3
mov dat x2

# Expose x motor position via our P pin for convenience
mov x3 p0
```

X and Y motor controllers:

Same as past iterations except we send back data via X pin on 1 and P pin on another

```
mov 50 p1
slx x0
tcp acc x0
- add 1
- mov 100 p1
+ sub 1
+ mov 0 p1
mov acc x0
slp 1
```

```
mov 50 p1
slx x0
tcp acc x0
- add 1
- mov 100 p1
+ sub 1
+ mov 0 p1
mov acc p0
slp 1
```

Harvest detector:

Due to `slx` complications, we cannot `slx` both motors and requests from reader. As a result, we stick to P for sanity

```
# Wait for request from reader
slp: slx x0

# Save x, y pair to registers
mov x0 acc
mov x0 dat

# If they are -999, -999 or 0, 0, then say it wasn't a match
tlt acc 1
+ tlt dat 1
+ jmp no

# If x and y both match current position
teq p0 acc
+ teq p1 dat
  # Say it was a match
+ mov 1 x0 # yes
  # Notify harvester to harvest
+ mov 1 x3
  # Don't run `else` scenario
+ jmp slp

# Otherwise (x and y don't match OR we got a jump), say no match
no: mov 0 x0
```

TODO: Maybe we don't use `dat` at all for storing position. What if we compare to `x1 === 14` for looping?

  That would work nicely if we use `acc`. Then it becomes `add 2`. So clean...

Moved to 0 based loop reader with hack on `acc` working pretty well but running into issues due to hack

```
# Reset RAM to current target location
mov acc x1

# Output target location pair
mov x0 x3
mov x0 x3

# Move to 0 position in RAM
mov 0 x1

# Output check location to harvest detector
loop: mov x0 x2
mov x0 x2

# If harvest detector had a match
teq x2 1
  # HACK: Move to current target location
  #   This should be 2 rows back
+ mov acc x1
  # Erase its contents
+ mov 0 x0
+ mov 0 x0
  # HACK: Bump target location to next pair
  #   This should only happen when matched position is target location
  #   It could be a position on the way to our target
+ add 2
check: teq x1 0
- jmp loop
slp: slp 1
```

Maybe we could keep track of position via `add 2` counting in harvest detector or another controller (e.g. `slx` to P pin)
  Never mind it's not possible due to X/P position being flipped in my head

Ah, harvester will know our target location's position in RAM
  Never mind, it won't due to out of order harvests

Uhhh, X pin reuse with controller that only keeps track of signals sent
  Still requires extra lines to flush signal...

Last working on "0 based loop copy"

We looked at the subreddit for help because we're stuck. Found out about under circuit wiring. Now we can squeeze in another controller that can touch RAM pins

Going to try out a separate controller to clean up memory
  trying to figure out how to get motor target position working...

How about 1 reader to push location to motors and request harvester for match Y/N
  If it matches, then bump our count... but how do we get unset timing right?
  I keep on thinking about 1 more pin...

Reader pushes to motor position
Reader pushes to looper to start looping
  If initial pair matches, send back 2 (add that)
  Otherwise, send back 0
  Looper loops and erases memory on match in harvester

Unsure about lines for looper but let's try it out

Okay, we are close again but need a line for saving harvester result:

Target position reader:

```
# Move to current target position
mov acc x1

# Output coordinates to motor parser
# TODO: We can probably lose motor parser now
mov x0 x3
mov x0 x3

# Reset our position so loop reader can read directly
# DEV: It's using the same pins
mov acc x1

# Output our address to loop reader so it can know when to stop
mov x1 x2

# Add back harvester result
# DEV: This is now returning 2 on a match and 0 on no match
#   Same code otherwise
add x2

# Sleep
slp: slp 1
```

Loop reader:

```
# Wait for signal from target reader
slp: slx x2

# Save loop stop position
mov x2 acc

# Tell harvester target coordinate position
mov x1 x3
mov x1 x3

# Save result to data
# DEV: The goal here is to reuse erase logic in loop
mov x3 dat

# Proxy back harvester result to target reader
mov dat x2

# If we had a match
loop: teq dat 2
  # Move back to position? Nah this is borked
+ mov dat x0
  # Unset data
+ mov 0 x1
+ mov 0 x1

# If we are at the stop position, break out of loop
teq x0 acc
+ jmp slp

# Feed next data to harvester
mov x1 x3
mov x1 x3
```

We should swap `acc` and `dat` so we can reuse `acc`

Maybe have 1 of readers only do data unwriting for past 2 cells

TODO: We can't ditch motor parser as it's 1 to 2 pins but we can relocate it's ignore logic

So we tried out double reading but it fails due to harvester sleeping

```
# Wait for signal
slp: slx x2

# Tell harvester about requested position
mov x1 x3
mov x1 x3

# Reset RAM position to 0
mov x2 x0

# Tell target reader about result
mov x3 x2

# Tell harvester about looping position
loop: mov x1 x3
mov x1 x3

# If it was a match
teq x3 2
  # Move to previous position
+ mov acc x0
  # Unset data
+ mov 0 x1
+ mov 0 x1

# Update starting position
# TODO: We can read into `acc` at start of `loop` instead of risking overflow
add 2

# If we didn't complete looping, then keep on looping
teq x0 0
- jmp loop
```

TODO: Maybe motor parser absorbs reading responsibility? as we prob need to move unset logic somewhere

Or maybe harvester ignores motor stuff entirely so initial reader compares to positions it gets back from motor parser and bumps its own damn acc

Okay, we are suuuuuper close. We got halted by a test case on one of the last screens.

Target reader:

```
# If we have already harvested these cells, then add 2 to our count
# TODO: It's possible there are multiple already harvested cells in a row
#   We should probably keep on jumping here. We'll hit 0,0 or -999,-999 eventually
# DEV: We are using `-1` to avoid conflicts with 0,0/-999,-999 and our incrementer
next: teq x0 -1
+ teq x0 -1
+ add 2

# Reset our position to current target
mov acc x1

# Output target to motor parser
mov x0 x3
mov x0 x3

# Reset to our current target
mov acc x1

# If motor's X doesn't line up
# TODO: It's probably double counting...
#   Try cutting this out
teq x3 x0
  # Flush Y coordinate and if/else
- mov x3 null
- jmp out

# If motor's Y lines up, then count it
teq x3 x0
+ add 2

# Tell loop reader where to reset to on completion
out: mov acc x2

# Sleep
slp: slp 1
```

Motor parser:

```
slp: slx x0
mov x0 acc
mov x0 dat
tlt acc 1
+ tlt dat 1
+ mov 0 x0
+ mov 0 x0
+ jmp slp
mov acc x3
mov dat x2
# New code:
# Back up and re-broadcast existing signals to pins and target reader
mov x3 dat
mov dat p0
mov dat x0
mov p1 x0
```

Loop reader:

```
# Wait for signal from target reader
slp: slx x2

# Back up position to restore to
mov x2 dat

# Go to start of RAM
mov 0 x0

# Save starting position
loop: mov x0 acc

# Ask harvester if we have a match
mov x1 x3
mov x1 x3

# If we matched, then reset position and set matched values to -1
teq x3 100
+ mov acc x0
+ mov -1 x1
+ mov -1 x1

# If we haven't finished looping, then continue looping
teq x0 0
- jmp loop

# Reset starting position for target reader
mov dat x0
```

OMFG WE SOLVED IT!!! YESSSSSSS!!! FUCKKK YESSSS!!!

- 1 MC6000, signal writer
- 1 RAM
- 1 MC6000, target reader
    - We can move to MC4000X to save cost
- 1 MC6000, motor parser
- 1 MC4000, X motor controller
- 1 MC4000, Y motor controller
- 1 MC6000, loop reader
- 1 MC6000, harvest matcher
- 1 MC4000, harvester
    - We can move from MC4000 for generator to something that stops looping early and DX300

Signal writer:

```
# Same code as past iterations for a while...
# Write incoming signal directly to RAM for speed
mov x1 x0
mov x1 x0

# Move to position we just wrote to
mov x3 acc
sub 2
mov acc x3

# If they were `-999`, then move back to their position so we overwrite on next read
teq x0 -999
+ jmp reset

# Otherwise, continue to next position
mov x0 null

# Clear out 7th position to zeroes
# TODO: Do we need to clear out zeros? I don't think we do now that harvester works...
mov x3 acc
mov 0 x0
mov 0 x0

# Reset position to get it written over
reset: mov acc x3

# Sleep
slp 1
```

Target reader:

```
# If the current target has been harvested
next: teq x0 -1
+ teq x0 -1
  # Increment our current target count
+ add 2
  # Check if this position has been harvested already
  # DEV: We eventually stop due to hitting 0, 0 or -999, -999
+ jmp next

# Move to our current target position
mov acc x1

# Tell motor parser of current position
mov x0 x3
mov x0 x3

# Tell looper where to reset to on completion
# DEV: This isn't fully necessary but it saves us a `null` flush in looper
mov acc x2

# Sleep
slp: slp 1
```

Motor parser:

```
# Wait for signal from target reader
slp: slx x0

# Save X/Y into registers for comparison
mov x0 acc
mov x0 dat

# If the pair is -999, -999 or 0, 0, then exit early
tlt acc 1
+ tlt dat 1
+ jmp slp

# Otherwise, tell motors to move to X and Y positions
mov acc x3
mov dat x2

# Proxy motor X's position to accessible P pin
# TODO: We can reroute wires under components to avoid this line
mov x3 p0
```

X motor controller:

```
# Reset motor position
mov 50 p1

# Wait for signal
slx x0

# Compare against our new position
tcp acc x0
  # If we are below it, then move forward
- add 1
- mov 100 p1
  # Otherwise, move back
+ sub 1
+ mov 0 p1

# Output latest position to X pin (preferably P pin but bad access)
mov acc x0

# Sleep
slp 1
```

Y motor position:

Same as X motor controller except outputs to P pin

```
mov 50 p1
slx x0
tcp acc x0
- add 1
- mov 100 p1
+ sub 1
+ mov 0 p1
mov acc p0
slp 1
```

Loop reader:

```
# Wait for signal from target reader
slp: slx x2

# Save position to reset RAM to for target reader
mov x2 dat

# Move to position 0 in RAM
mov 0 x0

# Save position being checked
loop: mov x0 acc

# Send position to harvester to find out if we match
mov x1 x3
mov x1 x3

# If harvester found a match, set values to `-1` for skipping
# TODO: We can exit early with a `jmp reset`
teq x3 100
+ mov acc x0
+ mov -1 x1
+ mov -1 x1

# If we aren't done looping, then continue looping
teq x0 0
- jmp loop

# Reset RAM position for target reader
mov dat x0
```

Harvest checker:

```
# Wait for signal from loop reader
slp: slx x1

# Save values to registers for comparison
mov x1 acc
mov x1 dat

# If the pair is -999, -999 or 0, 0. Reply early with no
tlt acc 1
+ tlt dat 1
+ jmp no

# Otherwise, if the pair matches the current motor positions
teq p0 acc
+ teq p1 dat
  # Reply yes
+ mov 100 x1 # yes
  # Tell harvester to generate
+ mov 100 x3
  # Don't run "no"
+ jmp slp

# Otherwise, reply no
no: mov 0 x1
```

Harvester:

```
# Wait for signal from harvest checker
slx x0

# Flush signal from harvest checker
mov x0 null

# Run harvest
gen p1 1 0
```
