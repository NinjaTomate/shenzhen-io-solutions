# Input variables
X_RADIO_RX

# Output variables
P_MOTOR
P_EXTEND
P_GRAB

# Gist
Check signal
If signal is 1
  Walk through RAM until 0 slot found (subcontroller)
  Write ID to RAM slot
If signal is 2
  Walk through RAM until ID found
  Write 0 to RAM slot

# First attempt
## MC6000
# Wait for signal
slx x0

# If signal is < 1 (-999), jump to sleep
tcp
# If signal is > 1 (2), do LOAD motion
# Otherwise, (1), do SAVE motion

- Logic should be same for load/save except for extend at start/end

Initial thought is to store ids in RAM by looping which should work but we were worried about address

```
slx x0
mov x0 dat
loop:
teq x2 0
- jmp loop
mov 14 acc
loop2:
sub 1
mov
teq acc 0
- jmp loop2
```

Now we realize that's not an issue:

[id] [index] [id] [index]

Loop until [id] = [0]

....

Actually no `[index]` needed, `a0` is index

[id] [id]

Loop until [id] = [0]

Move `a0` to `acc`
Sub 1
Mov `acc` to `a0`
Save `id`

## Partial progress
Signal handler:
Same as gist content
```
tcp x0 1
- jmp slp
+ jmp slp
gen p0 1 0
mov x0 x3
slp: slp 1
```

Write only from RAM:

```
# Wait for signal
slx x0

# Save id for later
mov x0 dat

# Find empty spot in RAM
loop:
teq x2 0
- jmp loop

# Back up 1 space in RAM
mov x3 acc
sub 1
mov acc x3

# Save `id` to RAM
mov dat x2

# We can send `acc` anywhere as it's the RAM index
```

After this, 3 controllers:

- 1 to handle signal from X_RADIO_RX and extend arm now/later
- 1 to handle RAM position
- 1 to move motor/grab

TODO: Potential optimization is signal handler/motor/grab can all be 1 controller

This isn't going to work as grab can happen on head or tail end of action...

```
# Reset motor to 50
@mov 50 p1

# Wait for index from RAM controller
slx x1

# Save index in ACC and DAT for moving there/back
mov x1 acc
mov acc dat

# Enable grab
mov 100 p0

# Move our motor in a loop
loop:
slp 1
mov 100 p1
teq acc 0
- sub 1
- jmp loop

# Wait for 1 second...
slp 1

# Reset motor and release grab (fails due to arm not being extended)
mov 50 p1
mov 0 p0
```

Maybe we have 1 controller for motor and 1 for grab?

I think the `if` logic is going to make all controllers much larger...

Maybe:

1 controller for choosing READ/WRITE controller
1 controller for READ
1 controller for WRITE
1 controller for RAM (need to see if RAM handle read/write in 1)


Verified that an all-in-one motor/extend/grab won't work due to sheer lines:

```
# Reset motor
@mov 50 p1

# Mock waiting for signal
slp 1

# Extend arm
mov 100 x2
slp 1

# Retract arm/add grab
mov 010 x2
slp 1

# Mock saving index
mov 1 acc

# Move motor to position
loop:
mov 100 p1
teq acc 0
- sub 1
- slp 1
- jmp loop

# Out of lines of code but would need to...
# Reset motor
# Wait 1s
# Extend arm + maintain grab
# Wait 1s
# Retract arm + release grab
# Wait 1s
# Loop motor in reverse

# And this doesn't even cover READ process...
```

Extend/grab should be 1 system
- Receive count
- Extend/grab for count

Motor should be another system
- Receive count
- Move to position, wait for 1s
- Move back to 0

Main or 2 controller to save/lookup indicies?

Extend/grab looks promising:

# Mock data controller
```
slp 1
mov 1 x3 # 1,468
slp 4 # Extd/grab
slp 3 # Next sig
slp 1
mov 1 x3 # 2,468
slp 4 # Extd/grab
slp 2 # Next sig
mov 1 x3 # 1,304
slp 4 # Extd/grabb
slp 3 # Next sig
mov 2 x3 # 1,591
slp 999
```

# Extend/grab controller
```
# Wait for signal
slx x0
# Save duration
mov x0 acc

# Extend arm
mov 100 x2
slp 1

# Retract arm + grab object
# DEV: We could use `add 1` but they take same lines of code
mov 010 x2
slp 1

# Sleep for motor movements
slp acc

# Extend arm
mov 110 x2
slp 1

# Retract arm + release
mov 000 x2
```
