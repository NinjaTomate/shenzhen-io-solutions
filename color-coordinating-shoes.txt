# Input variables
# P_BUTTON
# P_SENSOR

# Output variables
# P_INK_K
# P_INK_N

# First iterations
## Thoughts
Need to figure out how to get most common color

Once we have it, convert it to an index (7 indicies)

Read N/K from read only RAM [N_0, K_0, N_1, K_1, ...]

Maybe we convert to index and set RAM value at index

Then on release we perform reads
  But how do we know which one won...
  I guess >= and overwrite `dat` or something
    Also no ties so `>` only

TODO: Need to start at neutral

## Concept
3 controllers:

- Button press detector + RAM writer
    - When button off, send X trigger with NULL to next controller
- Common color calculator
    - On NULL signal from button press detector
    - Read from RAM, use >= to find best index
    - Send X trigger with index to next controller
- Color outputer
    - Jump to read only RAM at specified index
    - Flush next 2 values as N and K
    - Maybe swap order so its (K, N) like diagram

TODO: Use DX300 + MC4000X for last controller to save cost and pins?

TODO: We can also convert P_BUTTON to X_BUTTON via DX300
  but space seems limited

### Mapping logic
Input    Tens #    Offset     Normalize -1 to 0
20-39 -> 2 or 3 -> -1 or 0 -> 0
40-49 -> 4      -> 1       -> 1
50-59 -> 5      -> 2       -> 2
60-69 -> 6      -> 3       -> 3
70-79 -> 7      -> 4       -> 4
80-89 -> 8      -> 5       -> 5

Need to verify: Moving RAM address to -1 moves to 0
  Nope, it jumps to -1 index (in fact, -100 is -2 === -100 modulo 14)
  Thankfully, we should be fine to only use this logic on save
  So either use a `< -1` check or `< 40` check...

TODO: We might not need to X trigger from first controller to second
  We could have second watch button too

TODO: We need to wipe out RAM on LEARN end
  We can prob do that via second controller since we want to read before wipe

**Completed color reader, let's document it:**

```
# If LEARN is off, then sleep
teq p1 100
- jmp SLEEP

# Read in current sensor
mov p0 acc

# Convert to 0-5 index via our mapping
dgt 1
sub 3
tlt acc 0
+ mov 0 acc

# Save value to be saved to DAT
# DEV: We need to back it up since we lose position due to auto increment
#  Maybe there's some way to walk (14 - 6) spaces efficiently
mov acc dat

# Jump to our index
mov dat x3

# Read our input (auto-increments index)
mov x2 acc

# Update our count
add 1

# Jump to our index again
mov dat x3

# Output our updated count
mov acc x2

# Sleep
SLEEP: slp 1
```

We are out of registers for common compare

TODO: Maybe we can avoid wasting dat by saving last index in next section of RAM

[COUNT_0, COUNT_0_INDEX, COUNT_1, COUNT_1_INDEX, ...]

Even better, use 10's place as count

31 = count 3, index 1

TODO: Verify that dst 100 or 999 sets to 9 still
  It uses 1's place so no it won't work if we get more than 10 of same but let's see what happens...

TODO: If we get overflow issues for `dst + add`, then add a `tgt 90`?

Got highest calculator working but can't export due to not enough lines
  Need to add another MC to wipe RAM but not enough space

**Completed finder**

We had to move to `slx` model due to watching `p0` for changes costs too many lines

As explained before, we will be using `dat` as store for both count and index. This is done via count in 10s place (so comparisons still work) and index in 1s place (so we can restore it on output)

Example: 31 = count 3, index 1

It works since `30` > `20` (count 3 > count 2) \o/

```
# Wait for signal
# DEV: This is currently using reader for development
slx x0

# Reset maximum (x0 sends -1)
mov x0 dat

# Reset RAM to position 0
mov 0 x2

LOOP:
# Overwrite acc and set it to address value
#   This is 1's place setter
mov x2 acc

# Set count to 10's place
dst 1 x3

# If our count is higher
#   That is, if the 10's place is higher
#   There is never a tie in counts so we can do this without worry about indicies
tlt dat acc
  # Overwrite the data
+ mov acc dat

# If we aren't at the end of the loop, continue
tlt x2 6
+ jmp LOOP

# Restore winning COUNT + INDEX
mov dat acc

# Extract INDEX
dgt 0

# Output INDEX
mov acc x0
```

Dev controller

```
# Notify finder to find most common index
mov -1 x2
# Read most common index from pin
mov x2 null
# Sleep
slp 1
```

TODO: Maybe we do some smarter `teq p0 acc; mov p0 acc;` logic to detect change
  Nah, it takes up more lines than desired but maybe in reader?

## Data
Names laid out by wave length

| Index |        Name        | Key pairs |
|-------|--------------------|-----------|
|     0 | .blood             | 95, 5     |
|     1 | Deep Nacho         | 50, 5     |
|     2 | Chartreuse Abuse   | 5, 5      |
|     3 | Ballistic Viridian | 5, 60     |
|     4 | Cool Dad (r)       | 15, 80    |
|     5 | HyPURPLE           | 75, 85    |

TODO: Don't forget about neutral reset (fuck)

-----------------

Super close to solution, only missing reset for RAM after output

4 controllers (ugh, frustrating)

- Sensor writer to RAM
- Button change detection + value reader from read only RAM
- Most common input finder
- X to P outputter
- 1 RAM
- 1 read only RAM

It goes....

Sensor writer:

When LEARN is on
  Reads in sensor
  Map sensor value to a 0-5 index
  Increment the count at said index in RAM

Reader:

When LEARN changes from on to off
  Request most common index from Finder controller
  Jump to corresponding read only index
  Output (k, n) values to X to P outputter
    We ran out of P pins ourselves and couldn't rearrange to use DX300

Finder:

When signal received
  ... see explanation from before

X to P:

On init, set (k, n) to (50, 50)
Forward 2 (k, n) values to corresponding pins

TODO: We can probably do multiply for index in finder OR do `dgt` in reader

TODO: Maybe 4th controller do our reset? (loop 14 times with 0)
  Will prob need to shift components together more

-----

After shifting `dgt` from Finder to Reader, we were able to do rolling erase in Finder :tada:

New Finder summary:

When signal received
  Iterate over RAM values
  If RAM value is higher than last
    Save value + index in same register via magic
  After each read
    Erase value (resets for next LEARN phase)
  Output value + index to Reader

Writer:

```
# If LEARN button is off, continue
teq p1 100
- jmp SLEEP

# Read sensor into memory
# Perform mapping to 0-5
mov p0 acc
dgt 1
sub 3
tlt acc 0
+ mov 0 acc

# Save index so we can restore after auto increment
mov acc dat

# Jump to index
mov dat x3

# Read value in (index auto-incremented)
mov x2 acc

# Add 1 to value
add 1

# Jump to index
mov dat x3

# Save value
mov acc x2

# Sleep
SLEEP: slp 1
```

Reader:

```
# If the value of LEARN hasn't changed, continue
teq dat p0
+ jmp SLEEP

# Save new value to `dat` for later
mov p0 dat

# If we just started learning (i.e. 0 -> 100), continue
  # TODO: We can skip a `jmp` if we move all following content into `else` case
teq dat 100
+ jmp SLEEP

# Request most common value from Finder
# DEV: We use `-1` as it's reused by Finder as it's reset value
mov -1 x2

# Read most common value from Finder
mov x2 acc

# Extract index from (count, index) pair
#   This is the 10's place + 1's place combo
dgt 0

# Double offset due to 2 values for 1 index in RAM
mul 2

# Jump to RAM
mov acc x1

# Output key pair to X/P proxy
mov x0 x3
mov x0 x3
SLEEP: slp 1
```

X/P proxy:

```
# On init, reset (k, n) to (50, 50)
@mov 50 p1
@mov 50 p0

# Wait for new data
SLEEP: slx x0

# Set (k, n) to matching pins
mov x0 p1
mov x0 p0
```
