# Input variables
# P_WEIGHT
# P_BUTTON

# Output variables
# X_DISPLAY

# First iteration
## Overview
If button press
  AND if OFFSET === 0
  Set X_DISPLAY = -999
  # Skips potential logic issues
  # TODO: Could we set OFFSET = -999?
  Continue

If button press
  OFFSET = weight

Set ACC to OFFSET
Add weight
Update display

## Code
Content is more/less what's above but it's wrong...
  so that's changing...

```
teq p0 100
+ teq dat 0
+ mov -999 x3
+ jmp SLEEP
teq p0 100
+ mov 0 acc
+ sub p1
+ mov acc dat
mov dat acc
add p1
mov p1 x3
SLEEP: slp 1
```

TODO: Need to keep display off when -999
TODO: Not properly handling reset =/
  Thinking we need 2 controllers: 1 for on/off, 1 for weight calc

# Second iteration
## Overview

Controller 1

If NOT button press
  JMP RENDER

If NOT ENABLED
  ENABLED = 1
  JMP RENDER

# Otherwise this is tare/off (i.e. button press + enabled)

# TODO: Finish me...
Send 1 to X (tare update)
  TODO: Write out subcontroller (should
Get offset weight via X?

# In case of OFF, skip to SLEEP

RENDER:
If ENABLED
  # TODO: Send offset weight to X_DSIPLAY
  In dev, sending weight to X_DSIPLAY

SLEEP: slp 1


```
# Basic on/off functionality
# TODO: Don't get fooled by `p1` === `0`. It must be offset weight, not weight
teq p0 100
- jmp RENDER
teq dat 0
+ mov 1 dat
+ jmp RENDER

RENDER:
teq dat 1
+ mov p1 x3

SLEEP: slp 1
```

TODO: Prob can always calculate weight and let `button` read from it always

Example usage of DX300 as extra register for on/off
m
```
teq p0 100
- jmp RENDER
teq x3 000 # Using DX300 as extra register
+ mov 100 p1 # Using DX300 as extra register
+ jmp RENDER

RENDER:
teq x3 100 # Using DX300 as extra register
+ mov 20 x2

SLEEP: slp 1
```

Hmmm

Store offset in C2 (resets on all button press), query via P? (X is bulky)

Save last offset on each render to DAT

Where do we store enabled/disable?

Maybe X is good...

....

Controller 1, enable/disable
Controller 2, always calculate offset weight
Controller 3, if enable -> render offset weight

Here's our iteration on that, super close to working solution \o/

```
# If offset weight is 0 and button was pressed
# DEV: This waits for weight compute to finish
# DEV: Also make this first so we always drain it
#   and don't lag `p0` set too much
teq x1 0
+ teq p0 100
  # Turn on/off
+ not

# Export on/off status to pin
mov acc p1

# Wait for next second
slp 1
```

```
# If button is pressed
teq p0 100
  # Calculate new weight offset
+ mov 0 acc
+ sub p1
+ mov acc dat

# Calculate weight + offset
# DEV: We calculate this every second, even if off
#   This is tricky as enable/disable relies on offset itself
#   There's prob something smarter to do here...
mov dat acc
add p1

# Send out weight + offset to controllers
mov acc x3
mov acc x3

# Wait for next second
slp 1
```

```
# Wait for signal
SLEEP: slx x0

# Save offset weight
mov x0 dat

# If we were previously on but are now off, send shut down info
teq p0 0
+ teq acc 100
+ jmp SHUTOFF

# If we are on, render data and save on state
teq p0 100
+ mov dat x3
# TODO: Maybe move acc saving to head?
+ mov 100 acc

# Skip shut down
jmp SLEEP

# Perform shut down (i.e.
# TODO: Can we relocate this label somehow...?
SHUTOFF:
mov 0 acc
mov -999 x3
```

-------

Got a simpler form of last one:

```
# Wait for signal
slx x0

# Save offset weight
mov x0 dat

# If we were previously on but are now off, send shut down info
teq p0 0
+ teq acc 100
+ mov -999 x3

# If we are on, render data
teq p0 100
+ mov dat x3

# Save last enabled state
mov p0 acc
```

---------


Trying to fix save last enabled state in enable/disable (not working because need more registers)

mov x3 dat
teq p0 100
- jmp NEXT
teq dat 0
- jmp NEXT
teq acc 0
+ mov 100 acc
+ mov 100 p1

NEXT:
slp 1

TODO: what if we tell enable/disable if weight is same...

----------

Okay, this works but is convoluted as fuck. Should prob use RAM or something...

4 controllers:

- Offset weight calc, MC6000
- Offset weight same detector, MC6000 (prob can use MC4000X)
- Enable/disable toggle, MC6000 (prob can use MC4000)
- Display output combinator

Code:

Offset weight calc

```
# If button is pressed
teq p0 100
  # Calculate new weight offset
+ mov 0 acc
+ sub p1
+ mov acc dat

# Calculate weight + offset
# DEV: We calculate this every second, even if off
#   This is tricky as enable/disable relies on offset itself
#   There's prob something smarter to do here...
mov dat acc
add p1

# Send out weight + offset to controllers
mov acc x3
mov acc x3

# Wait for next second
slp 1
```

Offset weight same detector

```
# Read latest offset weight
mov x1 dat

# If weight is same as before
teq acc dat
  # Send NO CHANGE signal to enable/disable
+ mov 0 x2
  # Send CHANGE signal to enable/disable
- mov 1 x2

# Save offset weight for next iteration
mov dat acc
slp 1
```

Enable/disable

```
# If the offset weight is the same
# DEV: We must run this every time to flush it
teq x2 0
  # and button is pressed
+ teq p0 100
  # toggle state
+ not
# Output state 2x to prevent extra register usage
mov acc x3
mov acc x3

NEXT:
slp 1
```

Display combinator

```
# Wait for offset weight computation
slx x0

# Save latest weight to `dat`
# DEV: We have this here to guarantee it flushes
mov x0 dat

# If we are disabled
#  but were enabled
#  Shut off display
teq x1 0
+ teq acc 100
+ mov -999 x3

# Save new state
mov x1 acc

# If we are now enabled, send latest weight
teq acc 100
+ mov dat x3
```

TODO: Can prob move to P over X for something?
  Not sure of the benefit though...
  We need architecture change

-------

If last true weight === 0
  AND button === 100
  DISABLE/TOGGLE?

  No, because it could be a TARE action
  soo..

If tare occurred === 0
  AND last true weight === 0
  AND button === 0
  DISABLE/TOGGLE?

Removed 1 controller \o/

Code:

Offset weight calc

```
# Output last offset weight (we only need to verify it's 0)
mov acc x1

# If button is pressed
teq p0 100
  # Calculate new weight offset
+ mov 0 acc
+ sub p1
+ mov acc dat

# Calculate weight + offset
# DEV: We calculate this every second, even if off
#   This is tricky as enable/disable relies on offset itself
#   There's prob something smarter to do here...
mov dat acc
add p1

# Send out weight + offset to display cibtrikker
mov acc x3

# Wait for next second
slp 1
```

Enable/disable

```
# If last offset weight was 0
teq x0 0
  # and true weight is 0 (tare on 0)
+ teq p1 0
  # and button was pressed
+ teq p0 100
  # Toggle our state
+ not

# Output current state
mov acc x3
mov acc x3
slp 1
```


Display combinator

```
# Wait for offset weight computation
slx x0

# Save latest weight to `dat`
# DEV: We have this here to guarantee it flushes
mov x0 dat

# If we are disabled
#  but were enabled
#  Shut off display
teq x1 0
+ teq acc 100
+ mov -999 x3

# Save new state
mov x1 acc

# If we are now enabled, send latest weight
teq acc 100
+ mov dat x3
```

-------

Simplified again. There is prob a smart and passive way to do this but I'm feel this is good enough

- Offset weight calc, MC6000
- Enable/disable, MC4000
- DX300
- Display output, MC4000

Offset weight calc, same as above

```
# Output last offset weight (we only need to verify it's 0)
mov acc x1

# If button is pressed
teq p0 100
  # Calculate new weight offset
+ mov 0 acc
+ sub p1
+ mov acc dat

# Calculate weight + offset
# DEV: We calculate this every second, even if off
#   This is tricky as enable/disable relies on offset itself
#   There's prob something smarter to do here...
mov dat acc
add p1

# Send out weight + offset to display cibtrikker
mov acc x3

# Wait for next second
slp 1
```

Enable/disable

```
# If last offset weight was 0
teq x0 0
  # and true weight is 0 (tare on 0)
+ teq p1 0
  # and button was pressed
+ teq p0 100
  # Toggle our state (0 <-> 100)
  # DEV: We leverage 100's place via DX300
  #   so display controller must read from 100's port
+ not
  # Output state to DX300
+ mov acc x1
slp 1
```

Display

```
# Wait for offset weight computation
slx x0

# If we are disabled (100's place on DX300)
#  but were enabled
#  Shut off display
teq p0 0
+ teq acc 100
+ mov -999 x1

# If we are now enabled, send latest weight
teq p0 100
+ mov x0 x1
# Otherwise, flush buffer
- mov x0 null

# Save current weight
mov p0 acc
```
