# Input variables
# X_KEYPAD = {
#   -1: Cancel, 1: No cheese,
#   2: Add extra mustard, 3: Build
# }

# Output variables
# P_BREAD
# P_MEAT
# P_CHEESE
# P_MUSTARD
# P_FLAG

# Gist
Use RAM for flags as ACC is bulky
Possibly use RAM?

Save flags on ACC as digits

Follow instructions procedurally

Use DX300 for multiplexing easily

# Code
Wait for signal

Initial thoughts were to use ACC
and then handle all instructions in single script
but going to be too bulky

so swapping to ram and this is an interim state

Controller 1 MC6000

```
START:
# Wait for start signal
slx x1

# Save input
mov x1 dat

# If DAT < 3 and DAT > 0 as input
# DEV: This means option inputs
tlt dat 3
+ tgt dat 0
  # Save option in its RAM slot
  # DEV: This is a security hole as it's user input for memory
+ mov dat x3
+ mov 1 x2
  # Jump to START to prevent reset
+ jmp START

# If we should start, then start
teq dat 3
  # Send start signal
+ mov 100 x1
  # Wait for RAM to be used before reset
  # DEV: Not accurate but good enough
+ slp 7
# Otherwise (-1), continue with a reset
# Reset after completion too
mov 1 x3
mov 0 x2
mov 0 x2
```

Controller 2 MC6000

# Wait for start signal
slx x1
# Flush signal
mov x1 null
# Trigger bread + meat drop
mov 1 x0
# Wait for finish
slp 2
# Trigger cheese + mustard drop
mov 1 x2
# Wait for finish
slx x2
mov x2 null
# Trigger bread drop
mov 0 x0
# Wait for finish
slp 1
# Drop flag
gen p1 3 0

Controller 3 MC4000 (bread/meat controller)

# Wait for signal
slx x0
# Move signal for inspection later
mov x0 acc
# Drop bread + sleep
gen p1 1 0
# If drop meat, then drop meat + sleep
teq acc 1
+ gen p0 1 0

Controller 4 (MC6000)

# Wait for + flush signal
slx x3
mov x3 null

# Access cheese RAM
mov 1 x1
# If cheese (i.e. not "no cheese"), drop it + sleep
teq x0 1
- mov 100 x2
- slp 1

# Drop mustard
mov 010 x2
slp 1

# If extra mustard, hold it open for 1 second longer
# DEV: Mustard RAM already accessed due to auto-increment
teq x3 1
+ slp 1

# Stop sending mustard
mov 000 x2

# Report completion
move 100 x3


-------------

Revisiting without RAM as it wasn't support to be used....

Controller 1 MC6000

```
# Wait for signal
slx x1
# Save signal to DAT
mov x1 dat
# If reset options
teq dat -1
+ mov 0 acc
# Otherwise, save as value in ACC
#  e.g. 2 -> 100, 1 -> 010
- dst dat 1

# If we are making a sandwich
teq dat 3
# Output options to DX300 (breaks it down)
+ mov acc x2
# Put down bread
+ gen p1 1 0
# Trigger and wait for ingredients
# DEV: We could use `mov x3 null` to reset `acc`
+ mov 100 x3
+ slx x3
+ mov x3 null
# Put down bread
+ gen p1 1 0
# Put down flag
+ gen p0 3 0
# Reset options
+ mov 0 acc
```

Controller 2 MC6000

```
# When we get instructions
slx x0

# Flush data buffer
mov x0 dat

# Put down meat
mov 100 x2
slp 1

# If no "no cheese" was set (from DX300)
teq p1 100
- mov 010 x2
- slp 1

# Start putting down mustard
mov 100 x2
slp 1

# If we want extra mustard, wait longer before turning off
teq p0 100
+ slp 1

# Turn off all ingredients
mov 000 x2

# Tell Controller we are done
mov 100 x0
```
