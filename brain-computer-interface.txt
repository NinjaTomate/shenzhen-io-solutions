# Input variables
P_SENSE_0
P_SENSE_1
P_SENSE_2
P_SENSE_3
P_SENSE_4
P_SENSE_5

# Output variables
X_OUTPUT

# Gist
Queue up senses in RAM or some other storage mechanism
Don't send senses until we have 2 or more
Don't resend a sent sense within 2s
Send senses in numerical order

I think hardest part is going to be layout due to all of the wires
  We could use DX300 and `dgt` but I dislike that

First thoughts before layout are:

1 controller reads in values, writes to RAM at sequenced locations
  Maybe store with an expiry value next to it?
  Let's not worry about sustained values for now
Another controller gets signal from initial reader and does same for 3,4,5
  Sends signal to outputter
Outputter looks over data, if there's at least 2 values, then it sends them in order. Using RAM index as value to send

# Exploration
Yep, we definitely need a DX300
  No way to feed in 2 P to controller and feed out (1 X + 1 P) * 2

# First iteration
Initially we had a naive RAM writer but this overwrites data instantly
  We need something that either adds to existing values
  OR
  writes to next position

```
mov x0 acc
dgt 0
mov acc x2
mov x0 acc
dgt 1
mov acc x2
mov x0 acc
dgt 2
mov acc x2
mov x1 acc
dgt 0
mov acc x3
mov x1 x3
slp 1
```

```
slx x1
mov x1 dat
mov dat acc
dgt 1
mov acc x0
mov dat acc
dgt 2
mov acc x0
mov 0 x3
mov 0 x2
```

I don't think adding will work due to not unsetting values

I think we store up to 12th position and then jump to 0
  Then on read, we need to subtract 6 from index or something...

We have writing to 7th position with 0 looking good so it's sense-6 is always 0

Then we have a looper to see if we can read...

We are thinking about adding a outputter which calls back to looper who erases data

```
mov x0 acc # s:0
dgt 0
mov acc x2
mov x0 acc # s:1
dgt 1
mov acc x2
mov x0 acc # s:2
dgt 2
mov acc x2
mov x1 acc # s:3
dgt 0
mov acc x2
mov x1 x3
slp: slp 1
```

```
slx x1
mov x1 dat
mov dat acc # s:4
dgt 1
mov acc x0
mov dat acc
dgt 2
mov acc x0 # s:5
mov 0 x0 # s:NULL
mov 0 x3
```

```
slp: slx x1
mov 0 dat
mov x1 acc
loop: add x2
teq x0 0
- jmp loop
tgt acc 0
- jmp slp
mov 100 dat
```

So we were thinking about jumping back/forth 6 spaces. to output a digit. That seems sloppy. Maybe loop checker can add n+6 to nth slots?
  Uhh, maybe... maybe not... Worried about never expiring data

Could we use an OR gate with lagged reads/writes?
  Prob lack space for that =/

Backup of a reader iteration:

```
slx x3
mov x3 acc
loop: add 6
mov x0 dat
sub 6
mov acc x1
mov 0 x3
```

We tried out outputting loop index and content but we lose out on registers to concatenate numbers

I think we need to add them in RAM, let's proof of concept that...

Simple 1s outputter (need 2s):

```
slx x3
loop: mov x1 acc
teq x0 1
+ mov acc x2
teq x1 7
- jmp loop
mov 0 x1
mov x3 null
```
