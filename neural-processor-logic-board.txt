# Input variables
X_LOGOS_DATA
X_TELOS_DATA

# Output variables
P_LOGOS_PUMP
P_TELOS_PUMP
X_MESH_DATA

# Overview
Data packets = 24 values + 1 checksum
  If checksm matches, send along data

  Should be activated every 5s
  When data packet received, activate pump and reset delay

  Validate checksum:
    Add first value
    Subtract second
    Add third
    Subtract fourth
    Etc
    Add checksum (25th)
  If sum = 0, valid. Else, nope

# Gist
Leverage X pins to queue data

Should be plausible with 2 small controllers

- 1 to do checksum
- 1 to receive queue on 1 pin with checksum pending on another

Ah, not so easy. We need something to flip add/subtract

Also, we can prob reuse data between mesh data but let's keep it simple and solve 1 for now

Probably get a reader on X input that only sends non-999 values as well as a `not acc` value

Ah, damn. X pins only can be queued when reading from input. We are getting "blocked on write" with current setup

```
mov x3 dat
teq dat -999
+ jmp slp
mov dat acc
mov dat x0
loop: mov x3 dat
add dat
mov dat x0
teq dat -999
- jmp loop
slp: slp 1
```

```
slp: slx x2
teq x2 0
- jmp slp
mov 26 acc
loop: mov x3 x0
sub 1
teq acc 0
- jmp loop
```

Sooo I guess we'll have to use RAM

We could do `dgt` compression but that's going to be code hungry

How about 1 RAM for odd indicies and another for even indicies?

Tried a single controller with 2 RAM and already out of lines of code:

```
mov x2 dat
teq x2 -999 # This should be dat
+ jmp slp
mov dat x1
mov 26 acc
# We need to reset dat to 0 before looping
loop: teq dat 0
- mov 0 dat
- mov x2 x1
+ mov 100 dat
+ mov x2 x0
sub 1
teq acc 0
- jmp loop
slp: slp 1
```

Let's try that again with a prefix controller

We are definitely missing something... we are out of layout for 2 RAM writing...

```
mov x3 acc
teq acc -999
+ jmp slp
mov acc x1
mov 25 acc
loop: mov x3 x1
sub 1
teq acc 0
- jmp loop
slp: slp 1
```

```
slx x3
teq acc 0
- mov x2 x1
+ mov x2 x0
not
```

Going to try out 2 digit compression as per Reddit recommendations

Ah, we could use `dst` but that fucks up checksum. How about multiplication though ;)

We could do some compression that makes it so we can add/subtract these together...

Not sure off the top of my head though so I guess we'll be lazy about it

So we have 1 RAM writer working but we are thinking about taking out saving checksum in RAM entirely as it only conflates code logic:

```
# Read in signal from data
mov x3 acc

# If the data is -999, then ignore it
teq acc -999
+ jmp slp

# Otherwise, send data to RAM writer and loop
mov acc x1
mov 24 acc
loop: mov x3 x1
sub 1
teq acc 0
- jmp loop

# Fill last slots of RAM to reset position
mov 0 x1
mov 0 x1

# Send which pump was fired to X pin
mov 2 x0

# Sleep
slp: slp 1
```

RAM writer:

```
# Wait for signal
slx x3

# Overwrite acc with first digit
mov x3 acc

# If we aren't in checksum slot, the save second digit
teq x1 12
- dst 1 x3

# Output data to RAM
mov acc x0
```

We tried adding `dgt` to RAM writer but no luck:

```
slp: slx x3
mov x3 acc
teq acc -100
+ mov 0 x1
+ jmp slp
teq acc -200
+ mov x0 dat
+ mov dat acc
+ dgt 0
+ mov x3 acc
+ mov dat acc
+ dgt 1 # mov x3
- dst 1 x3
- mov acc x0
```

Maybe try doing `dst` logic in data receiver?

Joint acc/dat tracking doesn't work out lines of code wise

Maybe do straight up `-999` comparisons on data?

```
mov x3 acc
teq acc -999
+ jmp slp
mov 23 dat
loop: mov acc dat
mov x3 acc
dst 1 x3
mov dat acc
sub 1
teq acc 0
- jmp loop
mov -100 x1
mov x3 x0
slp: slp 1
```

Wow, we have something that works. It's tight and doesn't support outputting stored data but it's a good start

We should be able to cut down on storing directly in RAM via proxy and move to a `DGT` only reader

- 1 MC6000, data reader
- 1 MC6000, RAM controller
- 1 MC4000X, mesh data

Data reader:

```
# Save incoming data to acc
mov x3 acc

# If the packet was junk, ignore it
teq acc -999
+ jmp slp

# Read second packet
loop: mov x3 dat

# If the second packet was junk, then break out of loop
# DEV: This is only true at end of 25 piece packet
#   We have this to avoid overwriting 10s space in checksum
teq dat -999
+ jmp brk

# Save 10s space to data for compression
dst 1 dat

# Save compressed data to RAM via RAM controller
mov acc x1

# Overwrite acc with next packet (matches top of code)
mov x3 acc

# Loop
jmp loop

# Tell RAM to reset read position
brk: mov -100 x1

# Output checksum to mesh data controller
mov acc x0

# Sleep
slp: slp 1
```

RAM controller:

```
# Wait for signal
slp: slx x3

# Read incoming signal
mov x3 acc

# If it's a flag to reset RAM position, then do that
teq acc -100
+ mov 0 x1
+ jmp slp

# If it's a flag to output DGT info, then do that
teq acc -200
+ mov x0 dat
+ mov dat acc
+ dgt 0
+ mov acc x3
+ mov dat acc
+ dgt 1
+ mov acc x3

# Otherwise, save data to RAM
- mov acc x0
```

Mesh data controller:

```
# Wait for signal
slx x3

# Store checksum into accumulator
mov x3 acc

# Request decompressed data
loop: mov -200 x2

# Add/subtract decompressed pairs
add x2
sub x2

# If we have looped RAM, exit
teq x1 0
- jmp loop
```

We are running into layout issues by sticking only to the left side

Let's proof of concept the timing thing...

Maybe we can store data there?

We are currently prototyping an X pin to the right side

We should also try a P pin, not sure how they 2 mux together

Also, we'd have to do a P pin loop in that scenario but that's arguably less lines

It looks like the P pins work it out:

The following resolves 1:

```
mov 1 p1
slp: slp 1
```

```
mov 0 p1
slp: slp 1
```

```
mov p1 acc
slp 1
```

The following resolves 2:

```
mov 0 p1
slp: slp 1
```

```
mov 2 p1
slp: slp 1
```

```
mov p1 acc
slp 1
```
