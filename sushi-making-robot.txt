# Input variables
X_RADIO_RX

# Output variables
X_FISH
P_RICE
P_GATE_A
P_GATE_B
P_GATE_C

# Gist
Receive order
  Assemble sushi
    100 rice
    Fish signal
    30 rice
  Assume sushi is moving on conveyor belt
  Arrives at gate A in 3 units
  Arrives at gate B in 3 units
  Arrives at gate C in 3 units

Need to handle gates opening/closing concurrently.
  Probably via a queue system and each of the gate controllers sleep?
  Can't use the same controller and sleep for all of them due to potential lagged timings
  Maybe something with decrementing

Tables feel like a tree but we can also consider bitmasked values in binary

1 = 100, 100, 100
2 = 100, 100,   0
3 = 100,   0, 100
4 = 100,   0,   0
5 =   0, 100, 100
6 =   0, 100,   0
7 =   0,   0, 100
8 =   0,   0,   0

Sooo for gate A:

If > 4:
  # 1,2,3,4 -> 1,2,3,4
  - Move 100
  # 5,6,7,8 -> 1,2,3,4
  + Subtract 4
  + Move 0

Gate B:

If > 2
  # 1,2 -> 1,2
  - Move 100
  # 3,4 -> 1,2
  + Subtract 2
  + Move 0

Gate C:

If > 1
  # 1
  - Move 100
  # 2
  + Move 0

# Proof of concept stages

- Rice maker
- Queue layout

# Proof of concept rice maker
I'm a little worried that we will be sleeping for a order packet but it looks like we should be fine...

Logic (MC6000):

```
# Save incoming packet for inspection
mov x0 acc

# If the packet was junk, ignore it
teq acc -999
+ jmp slp

# Otherwise, save remainder of request
mov x0 dat

# Output 100 rice for 1s
gen p1 1 0

# Output fish type
mov acc x3

# Output 30 rice for 1s
mov 30 p1
slp 1
mov 0 p1

# Output table for order
mov dat x1

# Sleep
# TODO: If we do oversleep, maybe jump to `mov x0 acc` for even faster resolution?
slp: slp 1
```

# Queue system
We are thinking 3 controllers are ideal but maybe maybe not
  We could use 1 controller as long as it has a DX300

We are thinking output table value every 1s in RAM
  so basically `add 3` to figure out where reader will be
  Not sure how that works in reality though...

  Also what about multiple tables. We could do `dgt` stacking but that is going to be save position, read, reset position, write

  I think we have to though...

  Let's explore

We have some code for writing first digit but realizing that either writer needs to set up all 3 positions OR reader needs to read then write adjusted value 3 ahead
  Maybe we get a third controller on a double `slx` to write next ones?

```
mov x0 acc
teq acc -999
  # NEW: Tell writer about no table
+ mov 0 x1
+ jmp slp
mov x0 dat

# NEW: Tell writer about no table
mov 0 x1
gen p1 1 0
mov acc x3
mov 30 p1

# NEW: Tell writer about no table
mov 0 x1
slp 1
mov 0 p1
mov dat x1
slp: slp 1
```

```
# Move ourselves to 3rd position in RAM
@mov 3 x3

# Save current RAM position
mov x3 dat

# Save RAM value to acc
mov x2 acc

# Add table to 0th digit (autoincrements RAM)
# 20 + 8 -> 28
dst 0 x0

# Overwrite position with new data
mov dat x3
mov acc x2

# Tell reader it's free to read now
mov 100 x1

# Sleep
slp: slp 1
```

Tried to add updater controller but the sub logic get complex fast so we are attempting to us a calculator

```
slx x0
mov x2 dat
mov x3 acc
sub 4
mul 10
mov dat x2
mov acc x3
mov x2 dat
mov x3 acc
sub 20
mul 10
mov dat x2
mov acc x3
mov 0 x3
```

Started exploring reader part but realizing we will need something to read different parts

Also the gates are motors so we can't use a DX300. We'll need 3 controllers or some shared logic

Layout kind of sucks without knowing what we're building

Let's proof of concept a reader with values input by a controller

Maybe don't store raw table values in memory? Store bits instead?
  No, we can't. The bits are independent
  But how many tables stack up? Can we flush first 3 bits?
    I don't think that'll work due to running `dgt` logic on each one
    14 / 3 = ~4.66. Only 4 time units isn't enough

We tried a single controller but it didn't work out:

```
mov 000 x3
mov 000 x3
mov 000 x3
mov 000 x3
mov 000 x3
mov 000 x3
mov 006 x3
mov 000 x3
mov 000 x3
mov 020 x3
mov 000 x3
mov 000 x3
mov 200 x3
slp 999
```

```
mov 50 p1
mov x0 dat
mov dat acc
dgt 0
teq acc 0
+ jmp next
tgt acc 4
- mov 0 p1
+ mov 100 p1
next: mov dat x3
mov dat x3
slp 1
```

So, we have a working proof of concept for 3 MC4000. 1 for each pin. But it's quite bulky layout wise. We should explore other options:

```
# Multicast RAM entry
mov x0 dat
mov dat x3
mov dat x3
mov dat x3
slp 1
```

Gate controller:

```
# Reset motor position
mov 50 p1

# Load compressed data (table C, table B, table A)
mov x0 acc

# Load table A info
dgt 0

# If there is no table, exit
teq acc 0
+ jmp slp

# Adjust motor to move towards table
tgt acc 4
- mov 0 p1
+ mov 100 p1
slp: slp 1
```

Similar logic for table B and C (data is subtracted for proper comparisons)

```
mov 50 p1
mov x0 acc
dgt 1
teq acc 0
+ jmp slp
# DIFF: Compares against 2
tgt acc 2
- mov 0 p1
+ mov 100 p1
slp: slp 1
```

```
mov 50 p1
mov x0 acc
dgt 2
teq acc 0
+ jmp slp
# DIFF: Compares against 1
tgt acc 1
  # 0/100 are flipped
+ mov 0 p1
- mov 100 p1
slp: slp 1
```

Explored consolidating 2 controllers but looks like not likely unless they receive preparsed data (e.g. 4,2,1) but then we have a multicasting issue to worry about

```
mov 50 p0
mov 50 p1
mov x0 dat
mov dat x3
mov dat acc
dgt 0
teq acc 0
+ jmp next
tgt acc 4
- mov 0 p1
+ mov 100 p1
next: mov dat acc
dgt 1
# Missing 5 lines for `teq 0` ... `mov 0/100`
slp: slp 1
```

We were able to use an MC6000 for RAM reader though which saves some space:

Now it's 1 MC6000 (RAM reader + gate B controller), 2 MC4000 (gate A + gate C controller)

```
mov 50 p1
mov x0 acc
mov acc x1
mov acc x3
dgt 1
teq acc 0
+ jmp slp
tgt acc 2
- mov 0 p1
+ mov 100 p1
slp: slp 1
```

Now the only thing left is updating the counts for the tables

Let's proof of concept that too

Tried a writer that writes to multiple slots via another controller but we are out of space with the address mover:

```
mov x3 dat
mov x2 acc
mov 0 x1
mov dat x1
add 3
mov acc x2
mov 1 x1
mov dat x1
add 3 # Missing ac
mov 2 x1
mov dat x1
sub 6
mov acc x2
slp: slp 1
```

Going to offload address moving piece to writer

Here's some code with some address storage working but we are missing writing to every 3rd slot properly:

```
mov x3 dat
mov x2 acc
mov dat x1
mov 0 x1
mov acc x2
mov dat x1
mov 1 x1
mov acc x2
mov dat x1
mov 2 x1
mov acc x2
slp: slp 1
```

```
slx x3
mov x2 acc
mov x3 dat
dst x3 dat
mov acc x2
```

I think we need address management in the writer itself. Maybe leverage `mul` or something

We tried a multiplier based setter but it can't keep track of past positions but maybe we don't need multiplication at all. Move along normally, add 2 for next location, then reset when done?

```
mov x3 dat
mov x2 acc
mov 0 x1 # dgt:0
mov dat x1
mov 0 x1
mov 1 x1 # dgt:1
mov dat x1
mov 1 x1
mov 2 x1 # dgt:2
mov dat x1
mov 2 x1
slp: slp 1
```

```
slx x3
mov x3 acc
mul 3
add x2
mov acc x2
mov x1 acc
mov x3 dat
dst x3 dat
mov acc dat
mov x2 acc
sub 1
mov acc x2
mov dat x1
mov acc x2
```
