# Input variables
X_RADIO_RX

# Output variables
X_FISH
P_RICE
P_GATE_A
P_GATE_B
P_GATE_C

# Gist
Receive order
  Assemble sushi
    100 rice
    Fish signal
    30 rice
  Assume sushi is moving on conveyor belt
  Arrives at gate A in 3 units
  Arrives at gate B in 3 units
  Arrives at gate C in 3 units

Need to handle gates opening/closing concurrently.
  Probably via a queue system and each of the gate controllers sleep?
  Can't use the same controller and sleep for all of them due to potential lagged timings
  Maybe something with decrementing

Tables feel like a tree but we can also consider bitmasked values in binary

1 = 100, 100, 100
2 = 100, 100,   0
3 = 100,   0, 100
4 = 100,   0,   0
5 =   0, 100, 100
6 =   0, 100,   0
7 =   0,   0, 100
8 =   0,   0,   0

Sooo for gate A:

If > 4:
  # 1,2,3,4 -> 1,2,3,4
  - Move 100
  # 5,6,7,8 -> 1,2,3,4
  + Subtract 4
  + Move 0

Gate B:

If > 2
  # 1,2 -> 1,2
  - Move 100
  # 3,4 -> 1,2
  + Subtract 2
  + Move 0

Gate C:

If > 1
  # 1
  - Move 100
  # 2
  + Move 0

# Proof of concept stages

- Rice maker
- Queue layout

# Proof of concept rice maker
I'm a little worried that we will be sleeping for a order packet but it looks like we should be fine...

Logic (MC6000):

```
# Save incoming packet for inspection
mov x0 acc

# If the packet was junk, ignore it
teq acc -999
+ jmp slp

# Otherwise, save remainder of request
mov x0 dat

# Output 100 rice for 1s
gen p1 1 0

# Output fish type
mov acc x3

# Output 30 rice for 1s
mov 30 p1
slp 1
mov 0 p1

# Output table for order
mov dat x1

# Sleep
# TODO: If we do oversleep, maybe jump to `mov x0 acc` for even faster resolution?
slp: slp 1
```
