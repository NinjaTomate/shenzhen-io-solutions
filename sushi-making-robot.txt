# Input variables
X_RADIO_RX

# Output variables
X_FISH
P_RICE
P_GATE_A
P_GATE_B
P_GATE_C

# Gist
Receive order
  Assemble sushi
    100 rice
    Fish signal
    30 rice
  Assume sushi is moving on conveyor belt
  Arrives at gate A in 3 units
  Arrives at gate B in 3 units
  Arrives at gate C in 3 units

Need to handle gates opening/closing concurrently.
  Probably via a queue system and each of the gate controllers sleep?
  Can't use the same controller and sleep for all of them due to potential lagged timings
  Maybe something with decrementing

Tables feel like a tree but we can also consider bitmasked values in binary

1 = 100, 100, 100
2 = 100, 100,   0
3 = 100,   0, 100
4 = 100,   0,   0
5 =   0, 100, 100
6 =   0, 100,   0
7 =   0,   0, 100
8 =   0,   0,   0

Sooo for gate A:

If > 4:
  # 1,2,3,4 -> 1,2,3,4
  - Move 100
  # 5,6,7,8 -> 1,2,3,4
  + Subtract 4
  + Move 0

Gate B:

If > 2
  # 1,2 -> 1,2
  - Move 100
  # 3,4 -> 1,2
  + Subtract 2
  + Move 0

Gate C:

If > 1
  # 1
  - Move 100
  # 2
  + Move 0

# Proof of concept stages

- Rice maker
- Queue layout

# Proof of concept rice maker
I'm a little worried that we will be sleeping for a order packet but it looks like we should be fine...

Logic (MC6000):

```
# Save incoming packet for inspection
mov x0 acc

# If the packet was junk, ignore it
teq acc -999
+ jmp slp

# Otherwise, save remainder of request
mov x0 dat

# Output 100 rice for 1s
gen p1 1 0

# Output fish type
mov acc x3

# Output 30 rice for 1s
mov 30 p1
slp 1
mov 0 p1

# Output table for order
mov dat x1

# Sleep
# TODO: If we do oversleep, maybe jump to `mov x0 acc` for even faster resolution?
slp: slp 1
```

# Queue system
We are thinking 3 controllers are ideal but maybe maybe not
  We could use 1 controller as long as it has a DX300

We are thinking output table value every 1s in RAM
  so basically `add 3` to figure out where reader will be
  Not sure how that works in reality though...

  Also what about multiple tables. We could do `dgt` stacking but that is going to be save position, read, reset position, write

  I think we have to though...

  Let's explore

We have some code for writing first digit but realizing that either writer needs to set up all 3 positions OR reader needs to read then write adjusted value 3 ahead
  Maybe we get a third controller on a double `slx` to write next ones?

```
mov x0 acc
teq acc -999
  # NEW: Tell writer about no table
+ mov 0 x1
+ jmp slp
mov x0 dat

# NEW: Tell writer about no table
mov 0 x1
gen p1 1 0
mov acc x3
mov 30 p1

# NEW: Tell writer about no table
mov 0 x1
slp 1
mov 0 p1
mov dat x1
slp: slp 1
```

```
# Move ourselves to 3rd position in RAM
@mov 3 x3

# Save current RAM position
mov x3 dat

# Save RAM value to acc
mov x2 acc

# Add table to 0th digit (autoincrements RAM)
# 20 + 8 -> 28
dst 0 x0

# Overwrite position with new data
mov dat x3
mov acc x2

# Tell reader it's free to read now
mov 100 x1

# Sleep
slp: slp 1
```

Tried to add updater controller but the sub logic get complex fast so we are attempting to us a calculator

```
slx x0
mov x2 dat
mov x3 acc
sub 4
mul 10
mov dat x2
mov acc x3
mov x2 dat
mov x3 acc
sub 20
mul 10
mov dat x2
mov acc x3
mov 0 x3
```

Started exploring reader part but realizing we will need something to read different parts

Also the gates are motors so we can't use a DX300. We'll need 3 controllers or some shared logic

Layout kind of sucks without knowing what we're building

Let's proof of concept a reader with values input by a controller

Maybe don't store raw table values in memory? Store bits instead?
  No, we can't. The bits are independent
  But how many tables stack up? Can we flush first 3 bits?
    I don't think that'll work due to running `dgt` logic on each one
    14 / 3 = ~4.66. Only 4 time units isn't enough

We tried a single controller but it didn't work out:

```
mov 000 x3
mov 000 x3
mov 000 x3
mov 000 x3
mov 000 x3
mov 000 x3
mov 006 x3
mov 000 x3
mov 000 x3
mov 020 x3
mov 000 x3
mov 000 x3
mov 200 x3
slp 999
```

```
mov 50 p1
mov x0 dat
mov dat acc
dgt 0
teq acc 0
+ jmp next
tgt acc 4
- mov 0 p1
+ mov 100 p1
next: mov dat x3
mov dat x3
slp 1
```

So, we have a working proof of concept for 3 MC4000. 1 for each pin. But it's quite bulky layout wise. We should explore other options:

```
# Multicast RAM entry
mov x0 dat
mov dat x3
mov dat x3
mov dat x3
slp 1
```

Gate controller:

```
# Reset motor position
mov 50 p1

# Load compressed data (table C, table B, table A)
mov x0 acc

# Load table A info
dgt 0

# If there is no table, exit
teq acc 0
+ jmp slp

# Adjust motor to move towards table
tgt acc 4
- mov 0 p1
+ mov 100 p1
slp: slp 1
```

Similar logic for table B and C (data is subtracted for proper comparisons)

```
mov 50 p1
mov x0 acc
dgt 1
teq acc 0
+ jmp slp
# DIFF: Compares against 2
tgt acc 2
- mov 0 p1
+ mov 100 p1
slp: slp 1
```

```
mov 50 p1
mov x0 acc
dgt 2
teq acc 0
+ jmp slp
# DIFF: Compares against 1
tgt acc 1
  # 0/100 are flipped
+ mov 0 p1
- mov 100 p1
slp: slp 1
```

Explored consolidating 2 controllers but looks like not likely unless they receive preparsed data (e.g. 4,2,1) but then we have a multicasting issue to worry about

```
mov 50 p0
mov 50 p1
mov x0 dat
mov dat x3
mov dat acc
dgt 0
teq acc 0
+ jmp next
tgt acc 4
- mov 0 p1
+ mov 100 p1
next: mov dat acc
dgt 1
# Missing 5 lines for `teq 0` ... `mov 0/100`
slp: slp 1
```

We were able to use an MC6000 for RAM reader though which saves some space:

Now it's 1 MC6000 (RAM reader + gate B controller), 2 MC4000 (gate A + gate C controller)

```
mov 50 p1
mov x0 acc
mov acc x1
mov acc x3
dgt 1
teq acc 0
+ jmp slp
tgt acc 2
- mov 0 p1
+ mov 100 p1
slp: slp 1
```

Now the only thing left is updating the counts for the tables

Let's proof of concept that too

Tried a writer that writes to multiple slots via another controller but we are out of space with the address mover:

```
mov x3 dat
mov x2 acc
mov 0 x1
mov dat x1
add 3
mov acc x2
mov 1 x1
mov dat x1
add 3 # Missing ac
mov 2 x1
mov dat x1
sub 6
mov acc x2
slp: slp 1
```

Going to offload address moving piece to writer

Here's some code with some address storage working but we are missing writing to every 3rd slot properly:

```
mov x3 dat
mov x2 acc
mov dat x1
mov 0 x1
mov acc x2
mov dat x1
mov 1 x1
mov acc x2
mov dat x1
mov 2 x1
mov acc x2
slp: slp 1
```

```
slx x3
mov x2 acc
mov x3 dat
dst x3 dat
mov acc x2
```

I think we need address management in the writer itself. Maybe leverage `mul` or something

We tried a multiplier based setter but it can't keep track of past positions but maybe we don't need multiplication at all. Move along normally, add 2 for next location, then reset when done?

```
mov x3 dat
mov x2 acc
mov 0 x1 # dgt:0
mov dat x1
mov 0 x1
mov 1 x1 # dgt:1
mov dat x1
mov 1 x1
mov 2 x1 # dgt:2
mov dat x1
mov 2 x1
slp: slp 1
```

```
slx x3
mov x3 acc
mul 3
add x2
mov acc x2
mov x1 acc
mov x3 dat
dst x3 dat
mov acc dat
mov x2 acc
sub 1
mov acc x2
mov dat x1
mov acc x2
```

TODO: We will need to subtract 0/40 and 0/200/400/600 for accurate comparison somehow...

Closing in on solution now. Not sure where to squeeze subtraction. Maybe a controller next to RAM?
  Like a proxy to data? Won't work for read =( Maybe if we do a special code like -1

Anyway code so far:

2 MC6000 for writing in data

The gist is take table number and write it to n + 3 (00X), n + 6 (0X0), and n + 9 (X00)
  We iterate over slots n + 3, n + 6, and n + 9 via a controller that moves forward 3 spaces and writes

```
# Receive table number from rice controller
mov x3 dat

# Save starting position in `acc`
mov x2 acc

# Send table and digit to save under
mov dat x1 # dgt:0
mov 0 x1

# Flush completion signal
# DEV: We only need completion signal for resetting RAM position after "dgt:2"
mov x1 null

# Same logic for digits 1 and 2
mov dat x1 # dgt:1
mov 1 x1
mov x1 null
mov dat x1 # dgt:2
mov 2 x1
mov x1 null

# Move RAM to next position
# TODO: We can save 1 line of code by getting address for `acc` via `x1` and subtracting 5 (+1 -6)
add 1
mov acc x2
slp: slp 1
```

```
# Wait for signal from RAM writer
slx x3

# Load current position into memory
mov x2 acc

# Move forward 3 spaces
add 3
mov acc x2

# Load currently stored value into `acc`
mov x1 acc

# Receive table number
mov x3 dat

# Save table number under given digit (e.g. 0, 1, 2)
#   4, 2 -> 400
dst x3 dat

# Back up updated value into `dat`
mov acc dat

# Move back to space we read from (it was autoincremented on read)
mov x2 acc
sub 1
mov acc x2

# Output data to RAM
mov dat x1

# Reset RAM position for next iteration
# TODO: Can we cut this and use `mov x2` `add 2`?
mov acc x2

# Notify instruction writer we are done
mov 100 x3
```

We have writing down but we are missing numeric offsets. New code:

TODO: Instead of having a read proxy, how about we pass it a DST adjusted value and it reads/adds/writes

```
# Wait for signal
slx x3

# Move forward 3 spaces
mov x2 acc
add 3
mov acc x2

# Send a read request and read current value
mov -1 x1
mov x1 acc

# Perform DST for digit for table
mov x3 dat
dst x3 dat

# Perform write request
mov 1 x1
mov acc x1

# Notify completion
mov 100 x3
```

```
# Wait for signal
slx x0

# Save current position (we always go back)
mov x2 acc

# Perform read or write
teq -1 x0
+ mov x3 x0
- mov x0 x3

# Move back to previous position for easier moving
mov acc x2
```

We started on this but need a register for the address to write back to =/
  and layout won't budge
  Maybe we can leverage the other writer...

Nope, that's not working either

Undocumented snippet:

```
mov x3 acc
mov x3 dat
tgt dat 0
+ sub 4
tgt dat 1
+ sub 2
```

Subtraction needs extra registers to work with `dst` and I'm too tired to think more...

Simplified replicator with digit. Lacks address reset as we think something else can take care of it...

```
mov x3 acc
mov acc x0 # dgt:0
mov 0 x0
mov acc x0 # dgt:1
mov 1 x0
mov acc x0 # dgt:2
mov 2 x0
add 1
slp: slp 1
```

Index mover (jumps 3 spaces ahead)

```
slx x3
mov x2 acc
add 3
mov acc x2

# Tell writer to start reading values
mov 100 x1

# When writer requests, reset index
mov x1 null
mov acc x2
```

```
# Wait for signal from space jumper
slx x0

# Save table and digit
mov x3 acc
mov x3 dat

# Adjust table based on digit
# TODO: This is missing `tgt` for `acc` itself
tgt dat 0
+ sub 4
tgt dat 1
+ sub 2

# Back up data
mov acc dat

# Load in RAM
mov x2 acc

# Can't do `dst` as we overwrote our digit data
dst # Want to use DST on RAM value but can't due to not enough registers

# Tell space jumper to reset index
mov 100 x0
```

Lots of things to consider...
  - Can we store without doing 3 jumps?
  - Can we multiply content without controller?
  - Is there a better way to subtract data or compare in other controllers?

We have subtraction working but no RAM position reset on end...

Subtraction controller:

```
# Wait for signal
slx x0

# Flush space jumper signal
mov x0 null

# Save table number and digit
mov x3 acc
mov x3 dat

# Calculate subtraction offsets for digit
tgt dat 0
+ tgt acc 4
+ sub 4
tgt dat 1
+ tgt acc 2
+ sub 2

# Tell writer about subtracted table value and digit
mov acc x2
mov dat x2

# Listen for completion and pass back to space jumper
mov x2 x0
```

Writer controller:

```
# Wait for signal
slx x1

# Save RAM value to memory
mov x2 dat

# Move back to space we read from
mov x3 acc
sub 1
mov acc x3

# Move RAM value into acc for `dst`
mov dat acc

# Move subtracted table into `dat` for `dst`
mov x1 dat

# Perform `dst`
dst x1 dat

# Output our `dst` adjusted value to RAM
mov acc x2

# Signal completion
mov 100 x1
```

Well we have a solution and it's definitely power hungry. Everony else's is muuuch lower

Anyway, here's what we got:

- 1MC6000, radio reader + sushi maker
- 1MC6000, table/digit repeater
- 1MC4000X, space jumper
- 1MC6000, digit subtractor
- 1MC6000, digit replacer + RAM writer
- 1 RAM
- 1 MC6000, RAM reader + gate B controller + gate A/C proxy
- 1 MC4000, gate A controller
- 1 MC4000, gate C controller

Gist is...
  Radio reader gets packet, starts making sushi
  On sushi finish, tell writing group to serve it to "table"
  Writing group calculates nice values for reader to handle
  Writes that to RAM
  Reading group reads from RAM, looks at their digits/gates, and flips motors

Code:

Radio reader:

```
# Read incoming signal
mov x0 acc

# If it's `-999`, then say no table and sleep
teq acc -999
+ mov 0 x1
+ jmp slp

# Otherwise, save table number
mov x0 dat

# Tell writing group about no new data (assumes table 0)
mov 0 x1

# Pump out rice
gen p1 1 0

# Request fish
mov acc x3

# Pump out a little more rice
mov 30 p1

# Tell writing group about no new data (assumes table 0)
mov 0 x1

# Wait for rice to finish pumping
slp 1

# Reset rice pump
mov 0 p1

# Output table number to writing group
mov dat x1

# Sleep
slp: slp 1
```

Table/digit repeater:

```
# Store our starting RAM position
mov x1 acc

# Take our table number
mov x3 dat

# Repeat table number with digit to write to
#   Space jumper will jump 3 spaces for each of these
mov dat x0 # dgt:0
mov 0 x0

# Wait for remainder of work to complete
# DEV: Only necessary for end piece
mov x0 null

# Repeat same logic
mov dat x0 # dgt:1
mov 1 x0
mov x0 null
mov dat x0 # dgt:2
mov 2 x0

# When all values are done being written
mov x0 null

# Move RAM back to current index + 1
add 1
mov acc x1

# Sleep
slp: slp 1
```

Space jumper:

```
# Wait for incoming signal from table/digit repeater (not for us to read though)
slx x3

# Save current RAM position and jump 3 spaces ahead
mov x2 acc
add 3
mov acc x2

# Tell calculator it can read table/digit repeater's content
mov 100 x1

# Proxy back completion callback
mov x1 x3

# Reset RAM position to modulo 3 (it was unset from writer)
#   it could calculate but we already know it
mov acc x2
```

Digit subtractor:

```
# Wait for signal from space jumper
slx x0

# Flush space jumper signal
# We probably have enough timing lag that we don't need these signals to be wired up
mov x0 null

# Read incoming table and digit
mov x3 acc
mov x3 dat

# Calculate offset table based on digit
tgt dat 0
+ tgt acc 4
+ sub 4
tgt dat 1
+ tgt acc 2
+ sub 2

# Output offset table and digit to writer
mov acc x2
mov dat x2

# Proxy callback
mov x2 x0
```

Digit replacer + RAM writer:

```
# Wait for signal from digit subtractor
slx x1

# Load in RAM entry
mov x2 dat

# Move back to RAM position we just read from due to autoincrement
mov x3 acc
sub 1
mov acc x3

# Move RAM entry to `acc` for editing
mov dat acc

# Digit replace our offset table
mov x1 dat
dst x1 dat

# Save RAM entry
mov acc x2

# Callback
mov 100 x1
```

RAM reader:

```
# Reset gate B controller
mov 50 p1

# Save RAM entry to acc
mov x1 acc

# Re-broadcast RAM entry to gate A and C controllers
mov acc x0
mov acc x3

# Pick out gate B's index
dgt 1

# If it's 0 (i.e. no table), then do nothing
teq acc 0
+ jmp slp

# Otherwise, move toward table
tgt acc 2
- mov 100 p1
+ mov 0 p1

# Sleep
slp: slp 1
```

Gate A and C controllers:

Same as second half of RAM reader

```
mov 50 p1
mov x0 acc
dgt 0
teq acc 0
+ jmp slp
tgt acc 4
- mov 100 p1
+ mov 0 p1
slp: slp 1
```

```
mov 50 p1
mov x0 acc
dgt 2
teq acc 0
+ jmp slp
tgt acc 1
- mov 100 p1
+ mov 0 p1
slp: slp 1
```
